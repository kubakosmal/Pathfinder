/*! For license information please see main.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./node_modules/gsap/dist/gsap.js":function(__unused_webpack_module,exports){eval('(function (global, factory) {\r\n   true ? factory(exports) :\r\n  0;\r\n}(this, (function (exports) { \'use strict\';\r\n\r\n  function _inheritsLoose(subClass, superClass) {\r\n    subClass.prototype = Object.create(superClass.prototype);\r\n    subClass.prototype.constructor = subClass;\r\n    subClass.__proto__ = superClass;\r\n  }\r\n\r\n  function _assertThisInitialized(self) {\r\n    if (self === void 0) {\r\n      throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\r\n    }\r\n\r\n    return self;\r\n  }\r\n\r\n  /*!\r\n   * GSAP 3.8.0\r\n   * https://greensock.com\r\n   *\r\n   * @license Copyright 2008-2021, GreenSock. All rights reserved.\r\n   * Subject to the terms at https://greensock.com/standard-license or for\r\n   * Club GreenSock members, the agreement issued with that membership.\r\n   * @author: Jack Doyle, jack@greensock.com\r\n  */\r\n  var _config = {\r\n    autoSleep: 120,\r\n    force3D: "auto",\r\n    nullTargetWarn: 1,\r\n    units: {\r\n      lineHeight: ""\r\n    }\r\n  },\r\n      _defaults = {\r\n    duration: .5,\r\n    overwrite: false,\r\n    delay: 0\r\n  },\r\n      _suppressOverwrites,\r\n      _bigNum = 1e8,\r\n      _tinyNum = 1 / _bigNum,\r\n      _2PI = Math.PI * 2,\r\n      _HALF_PI = _2PI / 4,\r\n      _gsID = 0,\r\n      _sqrt = Math.sqrt,\r\n      _cos = Math.cos,\r\n      _sin = Math.sin,\r\n      _isString = function _isString(value) {\r\n    return typeof value === "string";\r\n  },\r\n      _isFunction = function _isFunction(value) {\r\n    return typeof value === "function";\r\n  },\r\n      _isNumber = function _isNumber(value) {\r\n    return typeof value === "number";\r\n  },\r\n      _isUndefined = function _isUndefined(value) {\r\n    return typeof value === "undefined";\r\n  },\r\n      _isObject = function _isObject(value) {\r\n    return typeof value === "object";\r\n  },\r\n      _isNotFalse = function _isNotFalse(value) {\r\n    return value !== false;\r\n  },\r\n      _windowExists = function _windowExists() {\r\n    return typeof window !== "undefined";\r\n  },\r\n      _isFuncOrString = function _isFuncOrString(value) {\r\n    return _isFunction(value) || _isString(value);\r\n  },\r\n      _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},\r\n      _isArray = Array.isArray,\r\n      _strictNumExp = /(?:-?\\.?\\d|\\.)+/gi,\r\n      _numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/g,\r\n      _numWithUnitExp = /[-+=.]*\\d+[.e-]*\\d*[a-z%]*/g,\r\n      _complexStringNumExp = /[-+=.]*\\d+\\.?\\d*(?:e-|e\\+)?\\d*/gi,\r\n      _relExp = /[+-]=-?[.\\d]+/,\r\n      _delimitedValueExp = /[^,\'"\\[\\]\\s]+/gi,\r\n      _unitExp = /[\\d.+\\-=]+(?:e[-+]\\d*)*/i,\r\n      _globalTimeline,\r\n      _win,\r\n      _coreInitted,\r\n      _doc,\r\n      _globals = {},\r\n      _installScope = {},\r\n      _coreReady,\r\n      _install = function _install(scope) {\r\n    return (_installScope = _merge(scope, _globals)) && gsap;\r\n  },\r\n      _missingPlugin = function _missingPlugin(property, value) {\r\n    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");\r\n  },\r\n      _warn = function _warn(message, suppress) {\r\n    return !suppress && console.warn(message);\r\n  },\r\n      _addGlobal = function _addGlobal(name, obj) {\r\n    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;\r\n  },\r\n      _emptyFunc = function _emptyFunc() {\r\n    return 0;\r\n  },\r\n      _reservedProps = {},\r\n      _lazyTweens = [],\r\n      _lazyLookup = {},\r\n      _lastRenderedFrame,\r\n      _plugins = {},\r\n      _effects = {},\r\n      _nextGCFrame = 30,\r\n      _harnessPlugins = [],\r\n      _callbackNames = "",\r\n      _harness = function _harness(targets) {\r\n    var target = targets[0],\r\n        harnessPlugin,\r\n        i;\r\n    _isObject(target) || _isFunction(target) || (targets = [targets]);\r\n\r\n    if (!(harnessPlugin = (target._gsap || {}).harness)) {\r\n      i = _harnessPlugins.length;\r\n\r\n      while (i-- && !_harnessPlugins[i].targetTest(target)) {}\r\n\r\n      harnessPlugin = _harnessPlugins[i];\r\n    }\r\n\r\n    i = targets.length;\r\n\r\n    while (i--) {\r\n      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);\r\n    }\r\n\r\n    return targets;\r\n  },\r\n      _getCache = function _getCache(target) {\r\n    return target._gsap || _harness(toArray(target))[0]._gsap;\r\n  },\r\n      _getProperty = function _getProperty(target, property, v) {\r\n    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;\r\n  },\r\n      _forEachName = function _forEachName(names, func) {\r\n    return (names = names.split(",")).forEach(func) || names;\r\n  },\r\n      _round = function _round(value) {\r\n    return Math.round(value * 100000) / 100000 || 0;\r\n  },\r\n      _roundPrecise = function _roundPrecise(value) {\r\n    return Math.round(value * 10000000) / 10000000 || 0;\r\n  },\r\n      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {\r\n    var l = toFind.length,\r\n        i = 0;\r\n\r\n    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}\r\n\r\n    return i < l;\r\n  },\r\n      _lazyRender = function _lazyRender() {\r\n    var l = _lazyTweens.length,\r\n        a = _lazyTweens.slice(0),\r\n        i,\r\n        tween;\r\n\r\n    _lazyLookup = {};\r\n    _lazyTweens.length = 0;\r\n\r\n    for (i = 0; i < l; i++) {\r\n      tween = a[i];\r\n      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);\r\n    }\r\n  },\r\n      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {\r\n    _lazyTweens.length && _lazyRender();\r\n    animation.render(time, suppressEvents, force);\r\n    _lazyTweens.length && _lazyRender();\r\n  },\r\n      _numericIfPossible = function _numericIfPossible(value) {\r\n    var n = parseFloat(value);\r\n    return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;\r\n  },\r\n      _passThrough = function _passThrough(p) {\r\n    return p;\r\n  },\r\n      _setDefaults = function _setDefaults(obj, defaults) {\r\n    for (var p in defaults) {\r\n      p in obj || (obj[p] = defaults[p]);\r\n    }\r\n\r\n    return obj;\r\n  },\r\n      _setKeyframeDefaults = function _setKeyframeDefaults(obj, defaults) {\r\n    for (var p in defaults) {\r\n      p in obj || p === "duration" || p === "ease" || (obj[p] = defaults[p]);\r\n    }\r\n  },\r\n      _merge = function _merge(base, toMerge) {\r\n    for (var p in toMerge) {\r\n      base[p] = toMerge[p];\r\n    }\r\n\r\n    return base;\r\n  },\r\n      _mergeDeep = function _mergeDeep(base, toMerge) {\r\n    for (var p in toMerge) {\r\n      p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);\r\n    }\r\n\r\n    return base;\r\n  },\r\n      _copyExcluding = function _copyExcluding(obj, excluding) {\r\n    var copy = {},\r\n        p;\r\n\r\n    for (p in obj) {\r\n      p in excluding || (copy[p] = obj[p]);\r\n    }\r\n\r\n    return copy;\r\n  },\r\n      _inheritDefaults = function _inheritDefaults(vars) {\r\n    var parent = vars.parent || _globalTimeline,\r\n        func = vars.keyframes ? _setKeyframeDefaults : _setDefaults;\r\n\r\n    if (_isNotFalse(vars.inherit)) {\r\n      while (parent) {\r\n        func(vars, parent.vars.defaults);\r\n        parent = parent.parent || parent._dp;\r\n      }\r\n    }\r\n\r\n    return vars;\r\n  },\r\n      _arraysMatch = function _arraysMatch(a1, a2) {\r\n    var i = a1.length,\r\n        match = i === a2.length;\r\n\r\n    while (match && i-- && a1[i] === a2[i]) {}\r\n\r\n    return i < 0;\r\n  },\r\n      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {\r\n    if (firstProp === void 0) {\r\n      firstProp = "_first";\r\n    }\r\n\r\n    if (lastProp === void 0) {\r\n      lastProp = "_last";\r\n    }\r\n\r\n    var prev = parent[lastProp],\r\n        t;\r\n\r\n    if (sortBy) {\r\n      t = child[sortBy];\r\n\r\n      while (prev && prev[sortBy] > t) {\r\n        prev = prev._prev;\r\n      }\r\n    }\r\n\r\n    if (prev) {\r\n      child._next = prev._next;\r\n      prev._next = child;\r\n    } else {\r\n      child._next = parent[firstProp];\r\n      parent[firstProp] = child;\r\n    }\r\n\r\n    if (child._next) {\r\n      child._next._prev = child;\r\n    } else {\r\n      parent[lastProp] = child;\r\n    }\r\n\r\n    child._prev = prev;\r\n    child.parent = child._dp = parent;\r\n    return child;\r\n  },\r\n      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {\r\n    if (firstProp === void 0) {\r\n      firstProp = "_first";\r\n    }\r\n\r\n    if (lastProp === void 0) {\r\n      lastProp = "_last";\r\n    }\r\n\r\n    var prev = child._prev,\r\n        next = child._next;\r\n\r\n    if (prev) {\r\n      prev._next = next;\r\n    } else if (parent[firstProp] === child) {\r\n      parent[firstProp] = next;\r\n    }\r\n\r\n    if (next) {\r\n      next._prev = prev;\r\n    } else if (parent[lastProp] === child) {\r\n      parent[lastProp] = prev;\r\n    }\r\n\r\n    child._next = child._prev = child.parent = null;\r\n  },\r\n      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {\r\n    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);\r\n    child._act = 0;\r\n  },\r\n      _uncache = function _uncache(animation, child) {\r\n    if (animation && (!child || child._end > animation._dur || child._start < 0)) {\r\n      var a = animation;\r\n\r\n      while (a) {\r\n        a._dirty = 1;\r\n        a = a.parent;\r\n      }\r\n    }\r\n\r\n    return animation;\r\n  },\r\n      _recacheAncestors = function _recacheAncestors(animation) {\r\n    var parent = animation.parent;\r\n\r\n    while (parent && parent.parent) {\r\n      parent._dirty = 1;\r\n      parent.totalDuration();\r\n      parent = parent.parent;\r\n    }\r\n\r\n    return animation;\r\n  },\r\n      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {\r\n    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);\r\n  },\r\n      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {\r\n    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;\r\n  },\r\n      _animationCycle = function _animationCycle(tTime, cycleDuration) {\r\n    var whole = Math.floor(tTime /= cycleDuration);\r\n    return tTime && whole === tTime ? whole - 1 : whole;\r\n  },\r\n      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {\r\n    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);\r\n  },\r\n      _setEnd = function _setEnd(animation) {\r\n    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));\r\n  },\r\n      _alignPlayhead = function _alignPlayhead(animation, totalTime) {\r\n    var parent = animation._dp;\r\n\r\n    if (parent && parent.smoothChildTiming && animation._ts) {\r\n      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));\r\n\r\n      _setEnd(animation);\r\n\r\n      parent._dirty || _uncache(parent, animation);\r\n    }\r\n\r\n    return animation;\r\n  },\r\n      _postAddChecks = function _postAddChecks(timeline, child) {\r\n    var t;\r\n\r\n    if (child._time || child._initted && !child._dur) {\r\n      t = _parentToChildTotalTime(timeline.rawTime(), child);\r\n\r\n      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {\r\n        child.render(t, true);\r\n      }\r\n    }\r\n\r\n    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {\r\n      if (timeline._dur < timeline.duration()) {\r\n        t = timeline;\r\n\r\n        while (t._dp) {\r\n          t.rawTime() >= 0 && t.totalTime(t._tTime);\r\n          t = t._dp;\r\n        }\r\n      }\r\n\r\n      timeline._zTime = -_tinyNum;\r\n    }\r\n  },\r\n      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {\r\n    child.parent && _removeFromParent(child);\r\n    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);\r\n    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));\r\n\r\n    _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);\r\n\r\n    _isFromOrFromStart(child) || (timeline._recent = child);\r\n    skipChecks || _postAddChecks(timeline, child);\r\n    return timeline;\r\n  },\r\n      _scrollTrigger = function _scrollTrigger(animation, trigger) {\r\n    return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);\r\n  },\r\n      _attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {\r\n    _initTween(tween, totalTime);\r\n\r\n    if (!tween._initted) {\r\n      return 1;\r\n    }\r\n\r\n    if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {\r\n      _lazyTweens.push(tween);\r\n\r\n      tween._lazy = [totalTime, suppressEvents];\r\n      return 1;\r\n    }\r\n  },\r\n      _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {\r\n    var parent = _ref.parent;\r\n    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));\r\n  },\r\n      _isFromOrFromStart = function _isFromOrFromStart(_ref2) {\r\n    var data = _ref2.data;\r\n    return data === "isFromStart" || data === "isStart";\r\n  },\r\n      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {\r\n    var prevRatio = tween.ratio,\r\n        ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,\r\n        repeatDelay = tween._rDelay,\r\n        tTime = 0,\r\n        pt,\r\n        iteration,\r\n        prevIteration;\r\n\r\n    if (repeatDelay && tween._repeat) {\r\n      tTime = _clamp(0, tween._tDur, totalTime);\r\n      iteration = _animationCycle(tTime, repeatDelay);\r\n      prevIteration = _animationCycle(tween._tTime, repeatDelay);\r\n      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);\r\n\r\n      if (iteration !== prevIteration) {\r\n        prevRatio = 1 - ratio;\r\n        tween.vars.repeatRefresh && tween._initted && tween.invalidate();\r\n      }\r\n    }\r\n\r\n    if (ratio !== prevRatio || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {\r\n      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents)) {\r\n        return;\r\n      }\r\n\r\n      prevIteration = tween._zTime;\r\n      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);\r\n      suppressEvents || (suppressEvents = totalTime && !prevIteration);\r\n      tween.ratio = ratio;\r\n      tween._from && (ratio = 1 - ratio);\r\n      tween._time = 0;\r\n      tween._tTime = tTime;\r\n      pt = tween._pt;\r\n\r\n      while (pt) {\r\n        pt.r(ratio, pt.d);\r\n        pt = pt._next;\r\n      }\r\n\r\n      tween._startAt && totalTime < 0 && tween._startAt.render(totalTime, true, true);\r\n      tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");\r\n      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");\r\n\r\n      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {\r\n        ratio && _removeFromParent(tween, 1);\r\n\r\n        if (!suppressEvents) {\r\n          _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);\r\n\r\n          tween._prom && tween._prom();\r\n        }\r\n      }\r\n    } else if (!tween._zTime) {\r\n      tween._zTime = totalTime;\r\n    }\r\n  },\r\n      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {\r\n    var child;\r\n\r\n    if (time > prevTime) {\r\n      child = animation._first;\r\n\r\n      while (child && child._start <= time) {\r\n        if (!child._dur && child.data === "isPause" && child._start > prevTime) {\r\n          return child;\r\n        }\r\n\r\n        child = child._next;\r\n      }\r\n    } else {\r\n      child = animation._last;\r\n\r\n      while (child && child._start >= time) {\r\n        if (!child._dur && child.data === "isPause" && child._start < prevTime) {\r\n          return child;\r\n        }\r\n\r\n        child = child._prev;\r\n      }\r\n    }\r\n  },\r\n      _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {\r\n    var repeat = animation._repeat,\r\n        dur = _roundPrecise(duration) || 0,\r\n        totalProgress = animation._tTime / animation._tDur;\r\n    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);\r\n    animation._dur = dur;\r\n    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);\r\n    totalProgress && !leavePlayhead ? _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress) : animation.parent && _setEnd(animation);\r\n    skipUncache || _uncache(animation.parent, animation);\r\n    return animation;\r\n  },\r\n      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {\r\n    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);\r\n  },\r\n      _zeroPosition = {\r\n    _start: 0,\r\n    endTime: _emptyFunc,\r\n    totalDuration: _emptyFunc\r\n  },\r\n      _parsePosition = function _parsePosition(animation, position, percentAnimation) {\r\n    var labels = animation.labels,\r\n        recent = animation._recent || _zeroPosition,\r\n        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,\r\n        i,\r\n        offset,\r\n        isPercent;\r\n\r\n    if (_isString(position) && (isNaN(position) || position in labels)) {\r\n      offset = position.charAt(0);\r\n      isPercent = position.substr(-1) === "%";\r\n      i = position.indexOf("=");\r\n\r\n      if (offset === "<" || offset === ">") {\r\n        i >= 0 && (position = position.replace(/=/, ""));\r\n        return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);\r\n      }\r\n\r\n      if (i < 0) {\r\n        position in labels || (labels[position] = clippedDuration);\r\n        return labels[position];\r\n      }\r\n\r\n      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));\r\n\r\n      if (isPercent && percentAnimation) {\r\n        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();\r\n      }\r\n\r\n      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;\r\n    }\r\n\r\n    return position == null ? clippedDuration : +position;\r\n  },\r\n      _createTweenType = function _createTweenType(type, params, timeline) {\r\n    var isLegacy = _isNumber(params[1]),\r\n        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),\r\n        vars = params[varsIndex],\r\n        irVars,\r\n        parent;\r\n\r\n    isLegacy && (vars.duration = params[1]);\r\n    vars.parent = timeline;\r\n\r\n    if (type) {\r\n      irVars = vars;\r\n      parent = timeline;\r\n\r\n      while (parent && !("immediateRender" in irVars)) {\r\n        irVars = parent.vars.defaults || {};\r\n        parent = _isNotFalse(parent.vars.inherit) && parent.parent;\r\n      }\r\n\r\n      vars.immediateRender = _isNotFalse(irVars.immediateRender);\r\n      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1];\r\n    }\r\n\r\n    return new Tween(params[0], vars, params[varsIndex + 1]);\r\n  },\r\n      _conditionalReturn = function _conditionalReturn(value, func) {\r\n    return value || value === 0 ? func(value) : func;\r\n  },\r\n      _clamp = function _clamp(min, max, value) {\r\n    return value < min ? min : value > max ? max : value;\r\n  },\r\n      getUnit = function getUnit(value) {\r\n    if (typeof value !== "string") {\r\n      return "";\r\n    }\r\n\r\n    var v = _unitExp.exec(value);\r\n\r\n    return v ? value.substr(v.index + v[0].length) : "";\r\n  },\r\n      clamp = function clamp(min, max, value) {\r\n    return _conditionalReturn(value, function (v) {\r\n      return _clamp(min, max, v);\r\n    });\r\n  },\r\n      _slice = [].slice,\r\n      _isArrayLike = function _isArrayLike(value, nonEmpty) {\r\n    return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;\r\n  },\r\n      _flatten = function _flatten(ar, leaveStrings, accumulator) {\r\n    if (accumulator === void 0) {\r\n      accumulator = [];\r\n    }\r\n\r\n    return ar.forEach(function (value) {\r\n      var _accumulator;\r\n\r\n      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);\r\n    }) || accumulator;\r\n  },\r\n      toArray = function toArray(value, scope, leaveStrings) {\r\n    return _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];\r\n  },\r\n      selector = function selector(value) {\r\n    value = toArray(value)[0] || _warn("Invalid scope") || {};\r\n    return function (v) {\r\n      var el = value.current || value.nativeElement || value;\r\n      return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc.createElement("div") : value);\r\n    };\r\n  },\r\n      shuffle = function shuffle(a) {\r\n    return a.sort(function () {\r\n      return .5 - Math.random();\r\n    });\r\n  },\r\n      distribute = function distribute(v) {\r\n    if (_isFunction(v)) {\r\n      return v;\r\n    }\r\n\r\n    var vars = _isObject(v) ? v : {\r\n      each: v\r\n    },\r\n        ease = _parseEase(vars.ease),\r\n        from = vars.from || 0,\r\n        base = parseFloat(vars.base) || 0,\r\n        cache = {},\r\n        isDecimal = from > 0 && from < 1,\r\n        ratios = isNaN(from) || isDecimal,\r\n        axis = vars.axis,\r\n        ratioX = from,\r\n        ratioY = from;\r\n\r\n    if (_isString(from)) {\r\n      ratioX = ratioY = {\r\n        center: .5,\r\n        edges: .5,\r\n        end: 1\r\n      }[from] || 0;\r\n    } else if (!isDecimal && ratios) {\r\n      ratioX = from[0];\r\n      ratioY = from[1];\r\n    }\r\n\r\n    return function (i, target, a) {\r\n      var l = (a || vars).length,\r\n          distances = cache[l],\r\n          originX,\r\n          originY,\r\n          x,\r\n          y,\r\n          d,\r\n          j,\r\n          max,\r\n          min,\r\n          wrapAt;\r\n\r\n      if (!distances) {\r\n        wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum])[1];\r\n\r\n        if (!wrapAt) {\r\n          max = -_bigNum;\r\n\r\n          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}\r\n\r\n          wrapAt--;\r\n        }\r\n\r\n        distances = cache[l] = [];\r\n        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;\r\n        originY = ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;\r\n        max = 0;\r\n        min = _bigNum;\r\n\r\n        for (j = 0; j < l; j++) {\r\n          x = j % wrapAt - originX;\r\n          y = originY - (j / wrapAt | 0);\r\n          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);\r\n          d > max && (max = d);\r\n          d < min && (min = d);\r\n        }\r\n\r\n        from === "random" && shuffle(distances);\r\n        distances.max = max - min;\r\n        distances.min = min;\r\n        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);\r\n        distances.b = l < 0 ? base - l : base;\r\n        distances.u = getUnit(vars.amount || vars.each) || 0;\r\n        ease = ease && l < 0 ? _invertEase(ease) : ease;\r\n      }\r\n\r\n      l = (distances[i] - distances.min) / distances.max || 0;\r\n      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;\r\n    };\r\n  },\r\n      _roundModifier = function _roundModifier(v) {\r\n    var p = Math.pow(10, ((v + "").split(".")[1] || "").length);\r\n    return function (raw) {\r\n      var n = Math.round(parseFloat(raw) / v) * v * p;\r\n      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw));\r\n    };\r\n  },\r\n      snap = function snap(snapTo, value) {\r\n    var isArray = _isArray(snapTo),\r\n        radius,\r\n        is2D;\r\n\r\n    if (!isArray && _isObject(snapTo)) {\r\n      radius = isArray = snapTo.radius || _bigNum;\r\n\r\n      if (snapTo.values) {\r\n        snapTo = toArray(snapTo.values);\r\n\r\n        if (is2D = !_isNumber(snapTo[0])) {\r\n          radius *= radius;\r\n        }\r\n      } else {\r\n        snapTo = _roundModifier(snapTo.increment);\r\n      }\r\n    }\r\n\r\n    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {\r\n      is2D = snapTo(raw);\r\n      return Math.abs(is2D - raw) <= radius ? is2D : raw;\r\n    } : function (raw) {\r\n      var x = parseFloat(is2D ? raw.x : raw),\r\n          y = parseFloat(is2D ? raw.y : 0),\r\n          min = _bigNum,\r\n          closest = 0,\r\n          i = snapTo.length,\r\n          dx,\r\n          dy;\r\n\r\n      while (i--) {\r\n        if (is2D) {\r\n          dx = snapTo[i].x - x;\r\n          dy = snapTo[i].y - y;\r\n          dx = dx * dx + dy * dy;\r\n        } else {\r\n          dx = Math.abs(snapTo[i] - x);\r\n        }\r\n\r\n        if (dx < min) {\r\n          min = dx;\r\n          closest = i;\r\n        }\r\n      }\r\n\r\n      closest = !radius || min <= radius ? snapTo[closest] : raw;\r\n      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);\r\n    });\r\n  },\r\n      random = function random(min, max, roundingIncrement, returnFunction) {\r\n    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {\r\n      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;\r\n    });\r\n  },\r\n      pipe = function pipe() {\r\n    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      functions[_key] = arguments[_key];\r\n    }\r\n\r\n    return function (value) {\r\n      return functions.reduce(function (v, f) {\r\n        return f(v);\r\n      }, value);\r\n    };\r\n  },\r\n      unitize = function unitize(func, unit) {\r\n    return function (value) {\r\n      return func(parseFloat(value)) + (unit || getUnit(value));\r\n    };\r\n  },\r\n      normalize = function normalize(min, max, value) {\r\n    return mapRange(min, max, 0, 1, value);\r\n  },\r\n      _wrapArray = function _wrapArray(a, wrapper, value) {\r\n    return _conditionalReturn(value, function (index) {\r\n      return a[~~wrapper(index)];\r\n    });\r\n  },\r\n      wrap = function wrap(min, max, value) {\r\n    var range = max - min;\r\n    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {\r\n      return (range + (value - min) % range) % range + min;\r\n    });\r\n  },\r\n      wrapYoyo = function wrapYoyo(min, max, value) {\r\n    var range = max - min,\r\n        total = range * 2;\r\n    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {\r\n      value = (total + (value - min) % total) % total || 0;\r\n      return min + (value > range ? total - value : value);\r\n    });\r\n  },\r\n      _replaceRandom = function _replaceRandom(value) {\r\n    var prev = 0,\r\n        s = "",\r\n        i,\r\n        nums,\r\n        end,\r\n        isArray;\r\n\r\n    while (~(i = value.indexOf("random(", prev))) {\r\n      end = value.indexOf(")", i);\r\n      isArray = value.charAt(i + 7) === "[";\r\n      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);\r\n      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);\r\n      prev = end + 1;\r\n    }\r\n\r\n    return s + value.substr(prev, value.length - prev);\r\n  },\r\n      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\r\n    var inRange = inMax - inMin,\r\n        outRange = outMax - outMin;\r\n    return _conditionalReturn(value, function (value) {\r\n      return outMin + ((value - inMin) / inRange * outRange || 0);\r\n    });\r\n  },\r\n      interpolate = function interpolate(start, end, progress, mutate) {\r\n    var func = isNaN(start + end) ? 0 : function (p) {\r\n      return (1 - p) * start + p * end;\r\n    };\r\n\r\n    if (!func) {\r\n      var isString = _isString(start),\r\n          master = {},\r\n          p,\r\n          i,\r\n          interpolators,\r\n          l,\r\n          il;\r\n\r\n      progress === true && (mutate = 1) && (progress = null);\r\n\r\n      if (isString) {\r\n        start = {\r\n          p: start\r\n        };\r\n        end = {\r\n          p: end\r\n        };\r\n      } else if (_isArray(start) && !_isArray(end)) {\r\n        interpolators = [];\r\n        l = start.length;\r\n        il = l - 2;\r\n\r\n        for (i = 1; i < l; i++) {\r\n          interpolators.push(interpolate(start[i - 1], start[i]));\r\n        }\r\n\r\n        l--;\r\n\r\n        func = function func(p) {\r\n          p *= l;\r\n          var i = Math.min(il, ~~p);\r\n          return interpolators[i](p - i);\r\n        };\r\n\r\n        progress = end;\r\n      } else if (!mutate) {\r\n        start = _merge(_isArray(start) ? [] : {}, start);\r\n      }\r\n\r\n      if (!interpolators) {\r\n        for (p in end) {\r\n          _addPropTween.call(master, start, p, "get", end[p]);\r\n        }\r\n\r\n        func = function func(p) {\r\n          return _renderPropTweens(p, master) || (isString ? start.p : start);\r\n        };\r\n      }\r\n    }\r\n\r\n    return _conditionalReturn(progress, func);\r\n  },\r\n      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {\r\n    var labels = timeline.labels,\r\n        min = _bigNum,\r\n        p,\r\n        distance,\r\n        label;\r\n\r\n    for (p in labels) {\r\n      distance = labels[p] - fromTime;\r\n\r\n      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {\r\n        label = p;\r\n        min = distance;\r\n      }\r\n    }\r\n\r\n    return label;\r\n  },\r\n      _callback = function _callback(animation, type, executeLazyFirst) {\r\n    var v = animation.vars,\r\n        callback = v[type],\r\n        params,\r\n        scope;\r\n\r\n    if (!callback) {\r\n      return;\r\n    }\r\n\r\n    params = v[type + "Params"];\r\n    scope = v.callbackScope || animation;\r\n    executeLazyFirst && _lazyTweens.length && _lazyRender();\r\n    return params ? callback.apply(scope, params) : callback.call(scope);\r\n  },\r\n      _interrupt = function _interrupt(animation) {\r\n    _removeFromParent(animation);\r\n\r\n    animation.scrollTrigger && animation.scrollTrigger.kill(false);\r\n    animation.progress() < 1 && _callback(animation, "onInterrupt");\r\n    return animation;\r\n  },\r\n      _quickTween,\r\n      _createPlugin = function _createPlugin(config) {\r\n    config = !config.name && config["default"] || config;\r\n\r\n    var name = config.name,\r\n        isFunc = _isFunction(config),\r\n        Plugin = name && !isFunc && config.init ? function () {\r\n      this._props = [];\r\n    } : config,\r\n        instanceDefaults = {\r\n      init: _emptyFunc,\r\n      render: _renderPropTweens,\r\n      add: _addPropTween,\r\n      kill: _killPropTweensOf,\r\n      modifier: _addPluginModifier,\r\n      rawVars: 0\r\n    },\r\n        statics = {\r\n      targetTest: 0,\r\n      get: 0,\r\n      getSetter: _getSetter,\r\n      aliases: {},\r\n      register: 0\r\n    };\r\n\r\n    _wake();\r\n\r\n    if (config !== Plugin) {\r\n      if (_plugins[name]) {\r\n        return;\r\n      }\r\n\r\n      _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));\r\n\r\n      _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));\r\n\r\n      _plugins[Plugin.prop = name] = Plugin;\r\n\r\n      if (config.targetTest) {\r\n        _harnessPlugins.push(Plugin);\r\n\r\n        _reservedProps[name] = 1;\r\n      }\r\n\r\n      name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin";\r\n    }\r\n\r\n    _addGlobal(name, Plugin);\r\n\r\n    config.register && config.register(gsap, Plugin, PropTween);\r\n  },\r\n      _255 = 255,\r\n      _colorLookup = {\r\n    aqua: [0, _255, _255],\r\n    lime: [0, _255, 0],\r\n    silver: [192, 192, 192],\r\n    black: [0, 0, 0],\r\n    maroon: [128, 0, 0],\r\n    teal: [0, 128, 128],\r\n    blue: [0, 0, _255],\r\n    navy: [0, 0, 128],\r\n    white: [_255, _255, _255],\r\n    olive: [128, 128, 0],\r\n    yellow: [_255, _255, 0],\r\n    orange: [_255, 165, 0],\r\n    gray: [128, 128, 128],\r\n    purple: [128, 0, 128],\r\n    green: [0, 128, 0],\r\n    red: [_255, 0, 0],\r\n    pink: [_255, 192, 203],\r\n    cyan: [0, _255, _255],\r\n    transparent: [_255, _255, _255, 0]\r\n  },\r\n      _hue = function _hue(h, m1, m2) {\r\n    h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;\r\n    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;\r\n  },\r\n      splitColor = function splitColor(v, toHSL, forceAlpha) {\r\n    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,\r\n        r,\r\n        g,\r\n        b,\r\n        h,\r\n        s,\r\n        l,\r\n        max,\r\n        min,\r\n        d,\r\n        wasHSL;\r\n\r\n    if (!a) {\r\n      if (v.substr(-1) === ",") {\r\n        v = v.substr(0, v.length - 1);\r\n      }\r\n\r\n      if (_colorLookup[v]) {\r\n        a = _colorLookup[v];\r\n      } else if (v.charAt(0) === "#") {\r\n        if (v.length < 6) {\r\n          r = v.charAt(1);\r\n          g = v.charAt(2);\r\n          b = v.charAt(3);\r\n          v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");\r\n        }\r\n\r\n        if (v.length === 9) {\r\n          a = parseInt(v.substr(1, 6), 16);\r\n          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];\r\n        }\r\n\r\n        v = parseInt(v.substr(1), 16);\r\n        a = [v >> 16, v >> 8 & _255, v & _255];\r\n      } else if (v.substr(0, 3) === "hsl") {\r\n        a = wasHSL = v.match(_strictNumExp);\r\n\r\n        if (!toHSL) {\r\n          h = +a[0] % 360 / 360;\r\n          s = +a[1] / 100;\r\n          l = +a[2] / 100;\r\n          g = l <= .5 ? l * (s + 1) : l + s - l * s;\r\n          r = l * 2 - g;\r\n          a.length > 3 && (a[3] *= 1);\r\n          a[0] = _hue(h + 1 / 3, r, g);\r\n          a[1] = _hue(h, r, g);\r\n          a[2] = _hue(h - 1 / 3, r, g);\r\n        } else if (~v.indexOf("=")) {\r\n          a = v.match(_numExp);\r\n          forceAlpha && a.length < 4 && (a[3] = 1);\r\n          return a;\r\n        }\r\n      } else {\r\n        a = v.match(_strictNumExp) || _colorLookup.transparent;\r\n      }\r\n\r\n      a = a.map(Number);\r\n    }\r\n\r\n    if (toHSL && !wasHSL) {\r\n      r = a[0] / _255;\r\n      g = a[1] / _255;\r\n      b = a[2] / _255;\r\n      max = Math.max(r, g, b);\r\n      min = Math.min(r, g, b);\r\n      l = (max + min) / 2;\r\n\r\n      if (max === min) {\r\n        h = s = 0;\r\n      } else {\r\n        d = max - min;\r\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\r\n        h *= 60;\r\n      }\r\n\r\n      a[0] = ~~(h + .5);\r\n      a[1] = ~~(s * 100 + .5);\r\n      a[2] = ~~(l * 100 + .5);\r\n    }\r\n\r\n    forceAlpha && a.length < 4 && (a[3] = 1);\r\n    return a;\r\n  },\r\n      _colorOrderData = function _colorOrderData(v) {\r\n    var values = [],\r\n        c = [],\r\n        i = -1;\r\n    v.split(_colorExp).forEach(function (v) {\r\n      var a = v.match(_numWithUnitExp) || [];\r\n      values.push.apply(values, a);\r\n      c.push(i += a.length + 1);\r\n    });\r\n    values.c = c;\r\n    return values;\r\n  },\r\n      _formatColors = function _formatColors(s, toHSL, orderMatchData) {\r\n    var result = "",\r\n        colors = (s + result).match(_colorExp),\r\n        type = toHSL ? "hsla(" : "rgba(",\r\n        i = 0,\r\n        c,\r\n        shell,\r\n        d,\r\n        l;\r\n\r\n    if (!colors) {\r\n      return s;\r\n    }\r\n\r\n    colors = colors.map(function (color) {\r\n      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";\r\n    });\r\n\r\n    if (orderMatchData) {\r\n      d = _colorOrderData(s);\r\n      c = orderMatchData.c;\r\n\r\n      if (c.join(result) !== d.c.join(result)) {\r\n        shell = s.replace(_colorExp, "1").split(_numWithUnitExp);\r\n        l = shell.length - 1;\r\n\r\n        for (; i < l; i++) {\r\n          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!shell) {\r\n      shell = s.split(_colorExp);\r\n      l = shell.length - 1;\r\n\r\n      for (; i < l; i++) {\r\n        result += shell[i] + colors[i];\r\n      }\r\n    }\r\n\r\n    return result + shell[l];\r\n  },\r\n      _colorExp = function () {\r\n    var s = "(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3,4}){1,2}\\\\b",\r\n        p;\r\n\r\n    for (p in _colorLookup) {\r\n      s += "|" + p + "\\\\b";\r\n    }\r\n\r\n    return new RegExp(s + ")", "gi");\r\n  }(),\r\n      _hslExp = /hsl[a]?\\(/,\r\n      _colorStringFilter = function _colorStringFilter(a) {\r\n    var combined = a.join(" "),\r\n        toHSL;\r\n    _colorExp.lastIndex = 0;\r\n\r\n    if (_colorExp.test(combined)) {\r\n      toHSL = _hslExp.test(combined);\r\n      a[1] = _formatColors(a[1], toHSL);\r\n      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));\r\n      return true;\r\n    }\r\n  },\r\n      _tickerActive,\r\n      _ticker = function () {\r\n    var _getTime = Date.now,\r\n        _lagThreshold = 500,\r\n        _adjustedLag = 33,\r\n        _startTime = _getTime(),\r\n        _lastUpdate = _startTime,\r\n        _gap = 1000 / 240,\r\n        _nextTime = _gap,\r\n        _listeners = [],\r\n        _id,\r\n        _req,\r\n        _raf,\r\n        _self,\r\n        _delta,\r\n        _i,\r\n        _tick = function _tick(v) {\r\n      var elapsed = _getTime() - _lastUpdate,\r\n          manual = v === true,\r\n          overlap,\r\n          dispatch,\r\n          time,\r\n          frame;\r\n\r\n      elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);\r\n      _lastUpdate += elapsed;\r\n      time = _lastUpdate - _startTime;\r\n      overlap = time - _nextTime;\r\n\r\n      if (overlap > 0 || manual) {\r\n        frame = ++_self.frame;\r\n        _delta = time - _self.time * 1000;\r\n        _self.time = time = time / 1000;\r\n        _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);\r\n        dispatch = 1;\r\n      }\r\n\r\n      manual || (_id = _req(_tick));\r\n\r\n      if (dispatch) {\r\n        for (_i = 0; _i < _listeners.length; _i++) {\r\n          _listeners[_i](time, _delta, frame, v);\r\n        }\r\n      }\r\n    };\r\n\r\n    _self = {\r\n      time: 0,\r\n      frame: 0,\r\n      tick: function tick() {\r\n        _tick(true);\r\n      },\r\n      deltaRatio: function deltaRatio(fps) {\r\n        return _delta / (1000 / (fps || 60));\r\n      },\r\n      wake: function wake() {\r\n        if (_coreReady) {\r\n          if (!_coreInitted && _windowExists()) {\r\n            _win = _coreInitted = window;\r\n            _doc = _win.document || {};\r\n            _globals.gsap = gsap;\r\n            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);\r\n\r\n            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});\r\n\r\n            _raf = _win.requestAnimationFrame;\r\n          }\r\n\r\n          _id && _self.sleep();\r\n\r\n          _req = _raf || function (f) {\r\n            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);\r\n          };\r\n\r\n          _tickerActive = 1;\r\n\r\n          _tick(2);\r\n        }\r\n      },\r\n      sleep: function sleep() {\r\n        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);\r\n        _tickerActive = 0;\r\n        _req = _emptyFunc;\r\n      },\r\n      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {\r\n        _lagThreshold = threshold || 1 / _tinyNum;\r\n        _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\r\n      },\r\n      fps: function fps(_fps) {\r\n        _gap = 1000 / (_fps || 240);\r\n        _nextTime = _self.time * 1000 + _gap;\r\n      },\r\n      add: function add(callback) {\r\n        _listeners.indexOf(callback) < 0 && _listeners.push(callback);\r\n\r\n        _wake();\r\n      },\r\n      remove: function remove(callback) {\r\n        var i;\r\n        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;\r\n      },\r\n      _listeners: _listeners\r\n    };\r\n    return _self;\r\n  }(),\r\n      _wake = function _wake() {\r\n    return !_tickerActive && _ticker.wake();\r\n  },\r\n      _easeMap = {},\r\n      _customEaseExp = /^[\\d.\\-M][\\d.\\-,\\s]/,\r\n      _quotesExp = /["\']/g,\r\n      _parseObjectInString = function _parseObjectInString(value) {\r\n    var obj = {},\r\n        split = value.substr(1, value.length - 3).split(":"),\r\n        key = split[0],\r\n        i = 1,\r\n        l = split.length,\r\n        index,\r\n        val,\r\n        parsedVal;\r\n\r\n    for (; i < l; i++) {\r\n      val = split[i];\r\n      index = i !== l - 1 ? val.lastIndexOf(",") : val.length;\r\n      parsedVal = val.substr(0, index);\r\n      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;\r\n      key = val.substr(index + 1).trim();\r\n    }\r\n\r\n    return obj;\r\n  },\r\n      _valueInParentheses = function _valueInParentheses(value) {\r\n    var open = value.indexOf("(") + 1,\r\n        close = value.indexOf(")"),\r\n        nested = value.indexOf("(", open);\r\n    return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);\r\n  },\r\n      _configEaseFromString = function _configEaseFromString(name) {\r\n    var split = (name + "").split("("),\r\n        ease = _easeMap[split[0]];\r\n    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;\r\n  },\r\n      _invertEase = function _invertEase(ease) {\r\n    return function (p) {\r\n      return 1 - ease(1 - p);\r\n    };\r\n  },\r\n      _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {\r\n    var child = timeline._first,\r\n        ease;\r\n\r\n    while (child) {\r\n      if (child instanceof Timeline) {\r\n        _propagateYoyoEase(child, isYoyo);\r\n      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {\r\n        if (child.timeline) {\r\n          _propagateYoyoEase(child.timeline, isYoyo);\r\n        } else {\r\n          ease = child._ease;\r\n          child._ease = child._yEase;\r\n          child._yEase = ease;\r\n          child._yoyo = isYoyo;\r\n        }\r\n      }\r\n\r\n      child = child._next;\r\n    }\r\n  },\r\n      _parseEase = function _parseEase(ease, defaultEase) {\r\n    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;\r\n  },\r\n      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {\r\n    if (easeOut === void 0) {\r\n      easeOut = function easeOut(p) {\r\n        return 1 - easeIn(1 - p);\r\n      };\r\n    }\r\n\r\n    if (easeInOut === void 0) {\r\n      easeInOut = function easeInOut(p) {\r\n        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;\r\n      };\r\n    }\r\n\r\n    var ease = {\r\n      easeIn: easeIn,\r\n      easeOut: easeOut,\r\n      easeInOut: easeInOut\r\n    },\r\n        lowercaseName;\r\n\r\n    _forEachName(names, function (name) {\r\n      _easeMap[name] = _globals[name] = ease;\r\n      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;\r\n\r\n      for (var p in ease) {\r\n        _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];\r\n      }\r\n    });\r\n\r\n    return ease;\r\n  },\r\n      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {\r\n    return function (p) {\r\n      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;\r\n    };\r\n  },\r\n      _configElastic = function _configElastic(type, amplitude, period) {\r\n    var p1 = amplitude >= 1 ? amplitude : 1,\r\n        p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),\r\n        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),\r\n        easeOut = function easeOut(p) {\r\n      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;\r\n    },\r\n        ease = type === "out" ? easeOut : type === "in" ? function (p) {\r\n      return 1 - easeOut(1 - p);\r\n    } : _easeInOutFromOut(easeOut);\r\n\r\n    p2 = _2PI / p2;\r\n\r\n    ease.config = function (amplitude, period) {\r\n      return _configElastic(type, amplitude, period);\r\n    };\r\n\r\n    return ease;\r\n  },\r\n      _configBack = function _configBack(type, overshoot) {\r\n    if (overshoot === void 0) {\r\n      overshoot = 1.70158;\r\n    }\r\n\r\n    var easeOut = function easeOut(p) {\r\n      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;\r\n    },\r\n        ease = type === "out" ? easeOut : type === "in" ? function (p) {\r\n      return 1 - easeOut(1 - p);\r\n    } : _easeInOutFromOut(easeOut);\r\n\r\n    ease.config = function (overshoot) {\r\n      return _configBack(type, overshoot);\r\n    };\r\n\r\n    return ease;\r\n  };\r\n\r\n  _forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {\r\n    var power = i < 5 ? i + 1 : i;\r\n\r\n    _insertEase(name + ",Power" + (power - 1), i ? function (p) {\r\n      return Math.pow(p, power);\r\n    } : function (p) {\r\n      return p;\r\n    }, function (p) {\r\n      return 1 - Math.pow(1 - p, power);\r\n    }, function (p) {\r\n      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;\r\n    });\r\n  });\r\n\r\n  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;\r\n\r\n  _insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());\r\n\r\n  (function (n, c) {\r\n    var n1 = 1 / c,\r\n        n2 = 2 * n1,\r\n        n3 = 2.5 * n1,\r\n        easeOut = function easeOut(p) {\r\n      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;\r\n    };\r\n\r\n    _insertEase("Bounce", function (p) {\r\n      return 1 - easeOut(1 - p);\r\n    }, easeOut);\r\n  })(7.5625, 2.75);\r\n\r\n  _insertEase("Expo", function (p) {\r\n    return p ? Math.pow(2, 10 * (p - 1)) : 0;\r\n  });\r\n\r\n  _insertEase("Circ", function (p) {\r\n    return -(_sqrt(1 - p * p) - 1);\r\n  });\r\n\r\n  _insertEase("Sine", function (p) {\r\n    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;\r\n  });\r\n\r\n  _insertEase("Back", _configBack("in"), _configBack("out"), _configBack());\r\n\r\n  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {\r\n    config: function config(steps, immediateStart) {\r\n      if (steps === void 0) {\r\n        steps = 1;\r\n      }\r\n\r\n      var p1 = 1 / steps,\r\n          p2 = steps + (immediateStart ? 0 : 1),\r\n          p3 = immediateStart ? 1 : 0,\r\n          max = 1 - _tinyNum;\r\n      return function (p) {\r\n        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;\r\n      };\r\n    }\r\n  };\r\n  _defaults.ease = _easeMap["quad.out"];\r\n\r\n  _forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {\r\n    return _callbackNames += name + "," + name + "Params,";\r\n  });\r\n\r\n  var GSCache = function GSCache(target, harness) {\r\n    this.id = _gsID++;\r\n    target._gsap = this;\r\n    this.target = target;\r\n    this.harness = harness;\r\n    this.get = harness ? harness.get : _getProperty;\r\n    this.set = harness ? harness.getSetter : _getSetter;\r\n  };\r\n  var Animation = function () {\r\n    function Animation(vars) {\r\n      this.vars = vars;\r\n      this._delay = +vars.delay || 0;\r\n\r\n      if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {\r\n        this._rDelay = vars.repeatDelay || 0;\r\n        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;\r\n      }\r\n\r\n      this._ts = 1;\r\n\r\n      _setDuration(this, +vars.duration, 1, 1);\r\n\r\n      this.data = vars.data;\r\n      _tickerActive || _ticker.wake();\r\n    }\r\n\r\n    var _proto = Animation.prototype;\r\n\r\n    _proto.delay = function delay(value) {\r\n      if (value || value === 0) {\r\n        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);\r\n        this._delay = value;\r\n        return this;\r\n      }\r\n\r\n      return this._delay;\r\n    };\r\n\r\n    _proto.duration = function duration(value) {\r\n      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;\r\n    };\r\n\r\n    _proto.totalDuration = function totalDuration(value) {\r\n      if (!arguments.length) {\r\n        return this._tDur;\r\n      }\r\n\r\n      this._dirty = 0;\r\n      return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));\r\n    };\r\n\r\n    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {\r\n      _wake();\r\n\r\n      if (!arguments.length) {\r\n        return this._tTime;\r\n      }\r\n\r\n      var parent = this._dp;\r\n\r\n      if (parent && parent.smoothChildTiming && this._ts) {\r\n        _alignPlayhead(this, _totalTime);\r\n\r\n        !parent._dp || parent.parent || _postAddChecks(parent, this);\r\n\r\n        while (parent && parent.parent) {\r\n          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {\r\n            parent.totalTime(parent._tTime, true);\r\n          }\r\n\r\n          parent = parent.parent;\r\n        }\r\n\r\n        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {\r\n          _addToTimeline(this._dp, this, this._start - this._delay);\r\n        }\r\n      }\r\n\r\n      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {\r\n        this._ts || (this._pTime = _totalTime);\r\n\r\n        _lazySafeRender(this, _totalTime, suppressEvents);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    _proto.time = function time(value, suppressEvents) {\r\n      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time;\r\n    };\r\n\r\n    _proto.totalProgress = function totalProgress(value, suppressEvents) {\r\n      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;\r\n    };\r\n\r\n    _proto.progress = function progress(value, suppressEvents) {\r\n      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;\r\n    };\r\n\r\n    _proto.iteration = function iteration(value, suppressEvents) {\r\n      var cycleDuration = this.duration() + this._rDelay;\r\n\r\n      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;\r\n    };\r\n\r\n    _proto.timeScale = function timeScale(value) {\r\n      if (!arguments.length) {\r\n        return this._rts === -_tinyNum ? 0 : this._rts;\r\n      }\r\n\r\n      if (this._rts === value) {\r\n        return this;\r\n      }\r\n\r\n      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;\r\n      this._rts = +value || 0;\r\n      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;\r\n\r\n      _recacheAncestors(this.totalTime(_clamp(-this._delay, this._tDur, tTime), true));\r\n\r\n      _setEnd(this);\r\n\r\n      return this;\r\n    };\r\n\r\n    _proto.paused = function paused(value) {\r\n      if (!arguments.length) {\r\n        return this._ps;\r\n      }\r\n\r\n      if (this._ps !== value) {\r\n        this._ps = value;\r\n\r\n        if (value) {\r\n          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());\r\n          this._ts = this._act = 0;\r\n        } else {\r\n          _wake();\r\n\r\n          this._ts = this._rts;\r\n          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum));\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    _proto.startTime = function startTime(value) {\r\n      if (arguments.length) {\r\n        this._start = value;\r\n        var parent = this.parent || this._dp;\r\n        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);\r\n        return this;\r\n      }\r\n\r\n      return this._start;\r\n    };\r\n\r\n    _proto.endTime = function endTime(includeRepeats) {\r\n      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);\r\n    };\r\n\r\n    _proto.rawTime = function rawTime(wrapRepeats) {\r\n      var parent = this.parent || this._dp;\r\n      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);\r\n    };\r\n\r\n    _proto.globalTime = function globalTime(rawTime) {\r\n      var animation = this,\r\n          time = arguments.length ? rawTime : animation.rawTime();\r\n\r\n      while (animation) {\r\n        time = animation._start + time / (animation._ts || 1);\r\n        animation = animation._dp;\r\n      }\r\n\r\n      return time;\r\n    };\r\n\r\n    _proto.repeat = function repeat(value) {\r\n      if (arguments.length) {\r\n        this._repeat = value === Infinity ? -2 : value;\r\n        return _onUpdateTotalDuration(this);\r\n      }\r\n\r\n      return this._repeat === -2 ? Infinity : this._repeat;\r\n    };\r\n\r\n    _proto.repeatDelay = function repeatDelay(value) {\r\n      if (arguments.length) {\r\n        var time = this._time;\r\n        this._rDelay = value;\r\n\r\n        _onUpdateTotalDuration(this);\r\n\r\n        return time ? this.time(time) : this;\r\n      }\r\n\r\n      return this._rDelay;\r\n    };\r\n\r\n    _proto.yoyo = function yoyo(value) {\r\n      if (arguments.length) {\r\n        this._yoyo = value;\r\n        return this;\r\n      }\r\n\r\n      return this._yoyo;\r\n    };\r\n\r\n    _proto.seek = function seek(position, suppressEvents) {\r\n      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));\r\n    };\r\n\r\n    _proto.restart = function restart(includeDelay, suppressEvents) {\r\n      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));\r\n    };\r\n\r\n    _proto.play = function play(from, suppressEvents) {\r\n      from != null && this.seek(from, suppressEvents);\r\n      return this.reversed(false).paused(false);\r\n    };\r\n\r\n    _proto.reverse = function reverse(from, suppressEvents) {\r\n      from != null && this.seek(from || this.totalDuration(), suppressEvents);\r\n      return this.reversed(true).paused(false);\r\n    };\r\n\r\n    _proto.pause = function pause(atTime, suppressEvents) {\r\n      atTime != null && this.seek(atTime, suppressEvents);\r\n      return this.paused(true);\r\n    };\r\n\r\n    _proto.resume = function resume() {\r\n      return this.paused(false);\r\n    };\r\n\r\n    _proto.reversed = function reversed(value) {\r\n      if (arguments.length) {\r\n        !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0));\r\n        return this;\r\n      }\r\n\r\n      return this._rts < 0;\r\n    };\r\n\r\n    _proto.invalidate = function invalidate() {\r\n      this._initted = this._act = 0;\r\n      this._zTime = -_tinyNum;\r\n      return this;\r\n    };\r\n\r\n    _proto.isActive = function isActive() {\r\n      var parent = this.parent || this._dp,\r\n          start = this._start,\r\n          rawTime;\r\n      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);\r\n    };\r\n\r\n    _proto.eventCallback = function eventCallback(type, callback, params) {\r\n      var vars = this.vars;\r\n\r\n      if (arguments.length > 1) {\r\n        if (!callback) {\r\n          delete vars[type];\r\n        } else {\r\n          vars[type] = callback;\r\n          params && (vars[type + "Params"] = params);\r\n          type === "onUpdate" && (this._onUpdate = callback);\r\n        }\r\n\r\n        return this;\r\n      }\r\n\r\n      return vars[type];\r\n    };\r\n\r\n    _proto.then = function then(onFulfilled) {\r\n      var self = this;\r\n      return new Promise(function (resolve) {\r\n        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,\r\n            _resolve = function _resolve() {\r\n          var _then = self.then;\r\n          self.then = null;\r\n          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);\r\n          resolve(f);\r\n          self.then = _then;\r\n        };\r\n\r\n        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {\r\n          _resolve();\r\n        } else {\r\n          self._prom = _resolve;\r\n        }\r\n      });\r\n    };\r\n\r\n    _proto.kill = function kill() {\r\n      _interrupt(this);\r\n    };\r\n\r\n    return Animation;\r\n  }();\r\n\r\n  _setDefaults(Animation.prototype, {\r\n    _time: 0,\r\n    _start: 0,\r\n    _end: 0,\r\n    _tTime: 0,\r\n    _tDur: 0,\r\n    _dirty: 0,\r\n    _repeat: 0,\r\n    _yoyo: false,\r\n    parent: null,\r\n    _initted: false,\r\n    _rDelay: 0,\r\n    _ts: 1,\r\n    _dp: 0,\r\n    ratio: 0,\r\n    _zTime: -_tinyNum,\r\n    _prom: 0,\r\n    _ps: false,\r\n    _rts: 1\r\n  });\r\n\r\n  var Timeline = function (_Animation) {\r\n    _inheritsLoose(Timeline, _Animation);\r\n\r\n    function Timeline(vars, position) {\r\n      var _this;\r\n\r\n      if (vars === void 0) {\r\n        vars = {};\r\n      }\r\n\r\n      _this = _Animation.call(this, vars) || this;\r\n      _this.labels = {};\r\n      _this.smoothChildTiming = !!vars.smoothChildTiming;\r\n      _this.autoRemoveChildren = !!vars.autoRemoveChildren;\r\n      _this._sort = _isNotFalse(vars.sortChildren);\r\n      _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);\r\n      vars.reversed && _this.reverse();\r\n      vars.paused && _this.paused(true);\r\n      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);\r\n      return _this;\r\n    }\r\n\r\n    var _proto2 = Timeline.prototype;\r\n\r\n    _proto2.to = function to(targets, vars, position) {\r\n      _createTweenType(0, arguments, this);\r\n\r\n      return this;\r\n    };\r\n\r\n    _proto2.from = function from(targets, vars, position) {\r\n      _createTweenType(1, arguments, this);\r\n\r\n      return this;\r\n    };\r\n\r\n    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {\r\n      _createTweenType(2, arguments, this);\r\n\r\n      return this;\r\n    };\r\n\r\n    _proto2.set = function set(targets, vars, position) {\r\n      vars.duration = 0;\r\n      vars.parent = this;\r\n      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);\r\n      vars.immediateRender = !!vars.immediateRender;\r\n      new Tween(targets, vars, _parsePosition(this, position), 1);\r\n      return this;\r\n    };\r\n\r\n    _proto2.call = function call(callback, params, position) {\r\n      return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);\r\n    };\r\n\r\n    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\r\n      vars.duration = duration;\r\n      vars.stagger = vars.stagger || stagger;\r\n      vars.onComplete = onCompleteAll;\r\n      vars.onCompleteParams = onCompleteAllParams;\r\n      vars.parent = this;\r\n      new Tween(targets, vars, _parsePosition(this, position));\r\n      return this;\r\n    };\r\n\r\n    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\r\n      vars.runBackwards = 1;\r\n      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);\r\n      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);\r\n    };\r\n\r\n    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {\r\n      toVars.startAt = fromVars;\r\n      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);\r\n      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);\r\n    };\r\n\r\n    _proto2.render = function render(totalTime, suppressEvents, force) {\r\n      var prevTime = this._time,\r\n          tDur = this._dirty ? this.totalDuration() : this._tDur,\r\n          dur = this._dur,\r\n          tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),\r\n          crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),\r\n          time,\r\n          child,\r\n          next,\r\n          iteration,\r\n          cycleDuration,\r\n          prevPaused,\r\n          pauseTween,\r\n          timeScale,\r\n          prevStart,\r\n          prevIteration,\r\n          yoyo,\r\n          isYoyo;\r\n      this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);\r\n\r\n      if (tTime !== this._tTime || force || crossingStart) {\r\n        if (prevTime !== this._time && dur) {\r\n          tTime += this._time - prevTime;\r\n          totalTime += this._time - prevTime;\r\n        }\r\n\r\n        time = tTime;\r\n        prevStart = this._start;\r\n        timeScale = this._ts;\r\n        prevPaused = !timeScale;\r\n\r\n        if (crossingStart) {\r\n          dur || (prevTime = this._zTime);\r\n          (totalTime || !suppressEvents) && (this._zTime = totalTime);\r\n        }\r\n\r\n        if (this._repeat) {\r\n          yoyo = this._yoyo;\r\n          cycleDuration = dur + this._rDelay;\r\n\r\n          if (this._repeat < -1 && totalTime < 0) {\r\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\r\n          }\r\n\r\n          time = _roundPrecise(tTime % cycleDuration);\r\n\r\n          if (tTime === tDur) {\r\n            iteration = this._repeat;\r\n            time = dur;\r\n          } else {\r\n            iteration = ~~(tTime / cycleDuration);\r\n\r\n            if (iteration && iteration === tTime / cycleDuration) {\r\n              time = dur;\r\n              iteration--;\r\n            }\r\n\r\n            time > dur && (time = dur);\r\n          }\r\n\r\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\r\n          !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration);\r\n\r\n          if (yoyo && iteration & 1) {\r\n            time = dur - time;\r\n            isYoyo = 1;\r\n          }\r\n\r\n          if (iteration !== prevIteration && !this._lock) {\r\n            var rewinding = yoyo && prevIteration & 1,\r\n                doesWrap = rewinding === (yoyo && iteration & 1);\r\n            iteration < prevIteration && (rewinding = !rewinding);\r\n            prevTime = rewinding ? 0 : dur;\r\n            this._lock = 1;\r\n            this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;\r\n            this._tTime = tTime;\r\n            !suppressEvents && this.parent && _callback(this, "onRepeat");\r\n            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);\r\n\r\n            if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {\r\n              return this;\r\n            }\r\n\r\n            dur = this._dur;\r\n            tDur = this._tDur;\r\n\r\n            if (doesWrap) {\r\n              this._lock = 2;\r\n              prevTime = rewinding ? dur : -0.0001;\r\n              this.render(prevTime, true);\r\n              this.vars.repeatRefresh && !isYoyo && this.invalidate();\r\n            }\r\n\r\n            this._lock = 0;\r\n\r\n            if (!this._ts && !prevPaused) {\r\n              return this;\r\n            }\r\n\r\n            _propagateYoyoEase(this, isYoyo);\r\n          }\r\n        }\r\n\r\n        if (this._hasPause && !this._forcing && this._lock < 2) {\r\n          pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));\r\n\r\n          if (pauseTween) {\r\n            tTime -= time - (time = pauseTween._start);\r\n          }\r\n        }\r\n\r\n        this._tTime = tTime;\r\n        this._time = time;\r\n        this._act = !timeScale;\r\n\r\n        if (!this._initted) {\r\n          this._onUpdate = this.vars.onUpdate;\r\n          this._initted = 1;\r\n          this._zTime = totalTime;\r\n          prevTime = 0;\r\n        }\r\n\r\n        if (!prevTime && time && !suppressEvents) {\r\n          _callback(this, "onStart");\r\n\r\n          if (this._tTime !== tTime) {\r\n            return this;\r\n          }\r\n        }\r\n\r\n        if (time >= prevTime && totalTime >= 0) {\r\n          child = this._first;\r\n\r\n          while (child) {\r\n            next = child._next;\r\n\r\n            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {\r\n              if (child.parent !== this) {\r\n                return this.render(totalTime, suppressEvents, force);\r\n              }\r\n\r\n              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);\r\n\r\n              if (time !== this._time || !this._ts && !prevPaused) {\r\n                pauseTween = 0;\r\n                next && (tTime += this._zTime = -_tinyNum);\r\n                break;\r\n              }\r\n            }\r\n\r\n            child = next;\r\n          }\r\n        } else {\r\n          child = this._last;\r\n          var adjustedTime = totalTime < 0 ? totalTime : time;\r\n\r\n          while (child) {\r\n            next = child._prev;\r\n\r\n            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {\r\n              if (child.parent !== this) {\r\n                return this.render(totalTime, suppressEvents, force);\r\n              }\r\n\r\n              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);\r\n\r\n              if (time !== this._time || !this._ts && !prevPaused) {\r\n                pauseTween = 0;\r\n                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);\r\n                break;\r\n              }\r\n            }\r\n\r\n            child = next;\r\n          }\r\n        }\r\n\r\n        if (pauseTween && !suppressEvents) {\r\n          this.pause();\r\n          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;\r\n\r\n          if (this._ts) {\r\n            this._start = prevStart;\r\n\r\n            _setEnd(this);\r\n\r\n            return this.render(totalTime, suppressEvents, force);\r\n          }\r\n        }\r\n\r\n        this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);\r\n        if (tTime === tDur && tDur >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {\r\n          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\r\n\r\n          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {\r\n            _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);\r\n\r\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\r\n          }\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    _proto2.add = function add(child, position) {\r\n      var _this2 = this;\r\n\r\n      _isNumber(position) || (position = _parsePosition(this, position, child));\r\n\r\n      if (!(child instanceof Animation)) {\r\n        if (_isArray(child)) {\r\n          child.forEach(function (obj) {\r\n            return _this2.add(obj, position);\r\n          });\r\n          return this;\r\n        }\r\n\r\n        if (_isString(child)) {\r\n          return this.addLabel(child, position);\r\n        }\r\n\r\n        if (_isFunction(child)) {\r\n          child = Tween.delayedCall(0, child);\r\n        } else {\r\n          return this;\r\n        }\r\n      }\r\n\r\n      return this !== child ? _addToTimeline(this, child, position) : this;\r\n    };\r\n\r\n    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {\r\n      if (nested === void 0) {\r\n        nested = true;\r\n      }\r\n\r\n      if (tweens === void 0) {\r\n        tweens = true;\r\n      }\r\n\r\n      if (timelines === void 0) {\r\n        timelines = true;\r\n      }\r\n\r\n      if (ignoreBeforeTime === void 0) {\r\n        ignoreBeforeTime = -_bigNum;\r\n      }\r\n\r\n      var a = [],\r\n          child = this._first;\r\n\r\n      while (child) {\r\n        if (child._start >= ignoreBeforeTime) {\r\n          if (child instanceof Tween) {\r\n            tweens && a.push(child);\r\n          } else {\r\n            timelines && a.push(child);\r\n            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));\r\n          }\r\n        }\r\n\r\n        child = child._next;\r\n      }\r\n\r\n      return a;\r\n    };\r\n\r\n    _proto2.getById = function getById(id) {\r\n      var animations = this.getChildren(1, 1, 1),\r\n          i = animations.length;\r\n\r\n      while (i--) {\r\n        if (animations[i].vars.id === id) {\r\n          return animations[i];\r\n        }\r\n      }\r\n    };\r\n\r\n    _proto2.remove = function remove(child) {\r\n      if (_isString(child)) {\r\n        return this.removeLabel(child);\r\n      }\r\n\r\n      if (_isFunction(child)) {\r\n        return this.killTweensOf(child);\r\n      }\r\n\r\n      _removeLinkedListItem(this, child);\r\n\r\n      if (child === this._recent) {\r\n        this._recent = this._last;\r\n      }\r\n\r\n      return _uncache(this);\r\n    };\r\n\r\n    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {\r\n      if (!arguments.length) {\r\n        return this._tTime;\r\n      }\r\n\r\n      this._forcing = 1;\r\n\r\n      if (!this._dp && this._ts) {\r\n        this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));\r\n      }\r\n\r\n      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);\r\n\r\n      this._forcing = 0;\r\n      return this;\r\n    };\r\n\r\n    _proto2.addLabel = function addLabel(label, position) {\r\n      this.labels[label] = _parsePosition(this, position);\r\n      return this;\r\n    };\r\n\r\n    _proto2.removeLabel = function removeLabel(label) {\r\n      delete this.labels[label];\r\n      return this;\r\n    };\r\n\r\n    _proto2.addPause = function addPause(position, callback, params) {\r\n      var t = Tween.delayedCall(0, callback || _emptyFunc, params);\r\n      t.data = "isPause";\r\n      this._hasPause = 1;\r\n      return _addToTimeline(this, t, _parsePosition(this, position));\r\n    };\r\n\r\n    _proto2.removePause = function removePause(position) {\r\n      var child = this._first;\r\n      position = _parsePosition(this, position);\r\n\r\n      while (child) {\r\n        if (child._start === position && child.data === "isPause") {\r\n          _removeFromParent(child);\r\n        }\r\n\r\n        child = child._next;\r\n      }\r\n    };\r\n\r\n    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {\r\n      var tweens = this.getTweensOf(targets, onlyActive),\r\n          i = tweens.length;\r\n\r\n      while (i--) {\r\n        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {\r\n      var a = [],\r\n          parsedTargets = toArray(targets),\r\n          child = this._first,\r\n          isGlobalTime = _isNumber(onlyActive),\r\n          children;\r\n\r\n      while (child) {\r\n        if (child instanceof Tween) {\r\n          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {\r\n            a.push(child);\r\n          }\r\n        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {\r\n          a.push.apply(a, children);\r\n        }\r\n\r\n        child = child._next;\r\n      }\r\n\r\n      return a;\r\n    };\r\n\r\n    _proto2.tweenTo = function tweenTo(position, vars) {\r\n      vars = vars || {};\r\n\r\n      var tl = this,\r\n          endTime = _parsePosition(tl, position),\r\n          _vars = vars,\r\n          startAt = _vars.startAt,\r\n          _onStart = _vars.onStart,\r\n          onStartParams = _vars.onStartParams,\r\n          immediateRender = _vars.immediateRender,\r\n          initted,\r\n          tween = Tween.to(tl, _setDefaults({\r\n        ease: vars.ease || "none",\r\n        lazy: false,\r\n        immediateRender: false,\r\n        time: endTime,\r\n        overwrite: "auto",\r\n        duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,\r\n        onStart: function onStart() {\r\n          tl.pause();\r\n\r\n          if (!initted) {\r\n            var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());\r\n            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);\r\n            initted = 1;\r\n          }\r\n\r\n          _onStart && _onStart.apply(tween, onStartParams || []);\r\n        }\r\n      }, vars));\r\n\r\n      return immediateRender ? tween.render(0) : tween;\r\n    };\r\n\r\n    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {\r\n      return this.tweenTo(toPosition, _setDefaults({\r\n        startAt: {\r\n          time: _parsePosition(this, fromPosition)\r\n        }\r\n      }, vars));\r\n    };\r\n\r\n    _proto2.recent = function recent() {\r\n      return this._recent;\r\n    };\r\n\r\n    _proto2.nextLabel = function nextLabel(afterTime) {\r\n      if (afterTime === void 0) {\r\n        afterTime = this._time;\r\n      }\r\n\r\n      return _getLabelInDirection(this, _parsePosition(this, afterTime));\r\n    };\r\n\r\n    _proto2.previousLabel = function previousLabel(beforeTime) {\r\n      if (beforeTime === void 0) {\r\n        beforeTime = this._time;\r\n      }\r\n\r\n      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);\r\n    };\r\n\r\n    _proto2.currentLabel = function currentLabel(value) {\r\n      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);\r\n    };\r\n\r\n    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {\r\n      if (ignoreBeforeTime === void 0) {\r\n        ignoreBeforeTime = 0;\r\n      }\r\n\r\n      var child = this._first,\r\n          labels = this.labels,\r\n          p;\r\n\r\n      while (child) {\r\n        if (child._start >= ignoreBeforeTime) {\r\n          child._start += amount;\r\n          child._end += amount;\r\n        }\r\n\r\n        child = child._next;\r\n      }\r\n\r\n      if (adjustLabels) {\r\n        for (p in labels) {\r\n          if (labels[p] >= ignoreBeforeTime) {\r\n            labels[p] += amount;\r\n          }\r\n        }\r\n      }\r\n\r\n      return _uncache(this);\r\n    };\r\n\r\n    _proto2.invalidate = function invalidate() {\r\n      var child = this._first;\r\n      this._lock = 0;\r\n\r\n      while (child) {\r\n        child.invalidate();\r\n        child = child._next;\r\n      }\r\n\r\n      return _Animation.prototype.invalidate.call(this);\r\n    };\r\n\r\n    _proto2.clear = function clear(includeLabels) {\r\n      if (includeLabels === void 0) {\r\n        includeLabels = true;\r\n      }\r\n\r\n      var child = this._first,\r\n          next;\r\n\r\n      while (child) {\r\n        next = child._next;\r\n        this.remove(child);\r\n        child = next;\r\n      }\r\n\r\n      this._dp && (this._time = this._tTime = this._pTime = 0);\r\n      includeLabels && (this.labels = {});\r\n      return _uncache(this);\r\n    };\r\n\r\n    _proto2.totalDuration = function totalDuration(value) {\r\n      var max = 0,\r\n          self = this,\r\n          child = self._last,\r\n          prevStart = _bigNum,\r\n          prev,\r\n          start,\r\n          parent;\r\n\r\n      if (arguments.length) {\r\n        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));\r\n      }\r\n\r\n      if (self._dirty) {\r\n        parent = self.parent;\r\n\r\n        while (child) {\r\n          prev = child._prev;\r\n          child._dirty && child.totalDuration();\r\n          start = child._start;\r\n\r\n          if (start > prevStart && self._sort && child._ts && !self._lock) {\r\n            self._lock = 1;\r\n            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;\r\n          } else {\r\n            prevStart = start;\r\n          }\r\n\r\n          if (start < 0 && child._ts) {\r\n            max -= start;\r\n\r\n            if (!parent && !self._dp || parent && parent.smoothChildTiming) {\r\n              self._start += start / self._ts;\r\n              self._time -= start;\r\n              self._tTime -= start;\r\n            }\r\n\r\n            self.shiftChildren(-start, false, -1e999);\r\n            prevStart = 0;\r\n          }\r\n\r\n          child._end > max && child._ts && (max = child._end);\r\n          child = prev;\r\n        }\r\n\r\n        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);\r\n\r\n        self._dirty = 0;\r\n      }\r\n\r\n      return self._tDur;\r\n    };\r\n\r\n    Timeline.updateRoot = function updateRoot(time) {\r\n      if (_globalTimeline._ts) {\r\n        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));\r\n\r\n        _lastRenderedFrame = _ticker.frame;\r\n      }\r\n\r\n      if (_ticker.frame >= _nextGCFrame) {\r\n        _nextGCFrame += _config.autoSleep || 120;\r\n        var child = _globalTimeline._first;\r\n        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {\r\n          while (child && !child._ts) {\r\n            child = child._next;\r\n          }\r\n\r\n          child || _ticker.sleep();\r\n        }\r\n      }\r\n    };\r\n\r\n    return Timeline;\r\n  }(Animation);\r\n\r\n  _setDefaults(Timeline.prototype, {\r\n    _lock: 0,\r\n    _hasPause: 0,\r\n    _forcing: 0\r\n  });\r\n\r\n  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {\r\n    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),\r\n        index = 0,\r\n        matchIndex = 0,\r\n        result,\r\n        startNums,\r\n        color,\r\n        endNum,\r\n        chunk,\r\n        startNum,\r\n        hasRandom,\r\n        a;\r\n    pt.b = start;\r\n    pt.e = end;\r\n    start += "";\r\n    end += "";\r\n\r\n    if (hasRandom = ~end.indexOf("random(")) {\r\n      end = _replaceRandom(end);\r\n    }\r\n\r\n    if (stringFilter) {\r\n      a = [start, end];\r\n      stringFilter(a, target, prop);\r\n      start = a[0];\r\n      end = a[1];\r\n    }\r\n\r\n    startNums = start.match(_complexStringNumExp) || [];\r\n\r\n    while (result = _complexStringNumExp.exec(end)) {\r\n      endNum = result[0];\r\n      chunk = end.substring(index, result.index);\r\n\r\n      if (color) {\r\n        color = (color + 1) % 5;\r\n      } else if (chunk.substr(-5) === "rgba(") {\r\n        color = 1;\r\n      }\r\n\r\n      if (endNum !== startNums[matchIndex++]) {\r\n        startNum = parseFloat(startNums[matchIndex - 1]) || 0;\r\n        pt._pt = {\r\n          _next: pt._pt,\r\n          p: chunk || matchIndex === 1 ? chunk : ",",\r\n          s: startNum,\r\n          c: endNum.charAt(1) === "=" ? parseFloat(endNum.substr(2)) * (endNum.charAt(0) === "-" ? -1 : 1) : parseFloat(endNum) - startNum,\r\n          m: color && color < 4 ? Math.round : 0\r\n        };\r\n        index = _complexStringNumExp.lastIndex;\r\n      }\r\n    }\r\n\r\n    pt.c = index < end.length ? end.substring(index, end.length) : "";\r\n    pt.fp = funcParam;\r\n\r\n    if (_relExp.test(end) || hasRandom) {\r\n      pt.e = 0;\r\n    }\r\n\r\n    this._pt = pt;\r\n    return pt;\r\n  },\r\n      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam) {\r\n    _isFunction(end) && (end = end(index || 0, target, targets));\r\n    var currentValue = target[prop],\r\n        parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),\r\n        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,\r\n        pt;\r\n\r\n    if (_isString(end)) {\r\n      if (~end.indexOf("random(")) {\r\n        end = _replaceRandom(end);\r\n      }\r\n\r\n      if (end.charAt(1) === "=") {\r\n        pt = parseFloat(parsedStart) + parseFloat(end.substr(2)) * (end.charAt(0) === "-" ? -1 : 1) + (getUnit(parsedStart) || 0);\r\n\r\n        if (pt || pt === 0) {\r\n          end = pt;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (parsedStart !== end) {\r\n      if (!isNaN(parsedStart * end) && end !== "") {\r\n        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);\r\n        funcParam && (pt.fp = funcParam);\r\n        modifier && pt.modifier(modifier, this, target);\r\n        return this._pt = pt;\r\n      }\r\n\r\n      !currentValue && !(prop in target) && _missingPlugin(prop, end);\r\n      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);\r\n    }\r\n  },\r\n      _processVars = function _processVars(vars, index, target, targets, tween) {\r\n    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));\r\n\r\n    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {\r\n      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;\r\n    }\r\n\r\n    var copy = {},\r\n        p;\r\n\r\n    for (p in vars) {\r\n      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);\r\n    }\r\n\r\n    return copy;\r\n  },\r\n      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {\r\n    var plugin, pt, ptLookup, i;\r\n\r\n    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {\r\n      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);\r\n\r\n      if (tween !== _quickTween) {\r\n        ptLookup = tween._ptLookup[tween._targets.indexOf(target)];\r\n        i = plugin._props.length;\r\n\r\n        while (i--) {\r\n          ptLookup[plugin._props[i]] = pt;\r\n        }\r\n      }\r\n    }\r\n\r\n    return plugin;\r\n  },\r\n      _overwritingTween,\r\n      _initTween = function _initTween(tween, time) {\r\n    var vars = tween.vars,\r\n        ease = vars.ease,\r\n        startAt = vars.startAt,\r\n        immediateRender = vars.immediateRender,\r\n        lazy = vars.lazy,\r\n        onUpdate = vars.onUpdate,\r\n        onUpdateParams = vars.onUpdateParams,\r\n        callbackScope = vars.callbackScope,\r\n        runBackwards = vars.runBackwards,\r\n        yoyoEase = vars.yoyoEase,\r\n        keyframes = vars.keyframes,\r\n        autoRevert = vars.autoRevert,\r\n        dur = tween._dur,\r\n        prevStartAt = tween._startAt,\r\n        targets = tween._targets,\r\n        parent = tween.parent,\r\n        fullTargets = parent && parent.data === "nested" ? parent.parent._targets : targets,\r\n        autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,\r\n        tl = tween.timeline,\r\n        cleanVars,\r\n        i,\r\n        p,\r\n        pt,\r\n        target,\r\n        hasPriority,\r\n        gsData,\r\n        harness,\r\n        plugin,\r\n        ptLookup,\r\n        index,\r\n        harnessVars,\r\n        overwritten;\r\n    tl && (!keyframes || !ease) && (ease = "none");\r\n    tween._ease = _parseEase(ease, _defaults.ease);\r\n    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;\r\n\r\n    if (yoyoEase && tween._yoyo && !tween._repeat) {\r\n      yoyoEase = tween._yEase;\r\n      tween._yEase = tween._ease;\r\n      tween._ease = yoyoEase;\r\n    }\r\n\r\n    tween._from = !tl && !!vars.runBackwards;\r\n\r\n    if (!tl) {\r\n      harness = targets[0] ? _getCache(targets[0]).harness : 0;\r\n      harnessVars = harness && vars[harness.prop];\r\n      cleanVars = _copyExcluding(vars, _reservedProps);\r\n      prevStartAt && prevStartAt.render(-1, true).kill();\r\n\r\n      if (startAt) {\r\n        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({\r\n          data: "isStart",\r\n          overwrite: false,\r\n          parent: parent,\r\n          immediateRender: true,\r\n          lazy: _isNotFalse(lazy),\r\n          startAt: null,\r\n          delay: 0,\r\n          onUpdate: onUpdate,\r\n          onUpdateParams: onUpdateParams,\r\n          callbackScope: callbackScope,\r\n          stagger: 0\r\n        }, startAt)));\r\n\r\n        time < 0 && !immediateRender && !autoRevert && tween._startAt.render(-1, true);\r\n\r\n        if (immediateRender) {\r\n          time > 0 && !autoRevert && (tween._startAt = 0);\r\n\r\n          if (dur && time <= 0) {\r\n            time && (tween._zTime = time);\r\n            return;\r\n          }\r\n        } else if (autoRevert === false) {\r\n          tween._startAt = 0;\r\n        }\r\n      } else if (runBackwards && dur) {\r\n        if (prevStartAt) {\r\n          !autoRevert && (tween._startAt = 0);\r\n        } else {\r\n          time && (immediateRender = false);\r\n          p = _setDefaults({\r\n            overwrite: false,\r\n            data: "isFromStart",\r\n            lazy: immediateRender && _isNotFalse(lazy),\r\n            immediateRender: immediateRender,\r\n            stagger: 0,\r\n            parent: parent\r\n          }, cleanVars);\r\n          harnessVars && (p[harness.prop] = harnessVars);\r\n\r\n          _removeFromParent(tween._startAt = Tween.set(targets, p));\r\n\r\n          time < 0 && tween._startAt.render(-1, true);\r\n\r\n          if (!immediateRender) {\r\n            _initTween(tween._startAt, _tinyNum);\r\n          } else if (!time) {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      tween._pt = 0;\r\n      lazy = dur && _isNotFalse(lazy) || lazy && !dur;\r\n\r\n      for (i = 0; i < targets.length; i++) {\r\n        target = targets[i];\r\n        gsData = target._gsap || _harness(targets)[i]._gsap;\r\n        tween._ptLookup[i] = ptLookup = {};\r\n        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender();\r\n        index = fullTargets === targets ? i : fullTargets.indexOf(target);\r\n\r\n        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {\r\n          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);\r\n\r\n          plugin._props.forEach(function (name) {\r\n            ptLookup[name] = pt;\r\n          });\r\n\r\n          plugin.priority && (hasPriority = 1);\r\n        }\r\n\r\n        if (!harness || harnessVars) {\r\n          for (p in cleanVars) {\r\n            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {\r\n              plugin.priority && (hasPriority = 1);\r\n            } else {\r\n              ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);\r\n            }\r\n          }\r\n        }\r\n\r\n        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);\r\n\r\n        if (autoOverwrite && tween._pt) {\r\n          _overwritingTween = tween;\r\n\r\n          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time));\r\n\r\n          overwritten = !tween.parent;\r\n          _overwritingTween = 0;\r\n        }\r\n\r\n        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);\r\n      }\r\n\r\n      hasPriority && _sortPropTweensByPriority(tween);\r\n      tween._onInit && tween._onInit(tween);\r\n    }\r\n\r\n    tween._onUpdate = onUpdate;\r\n    tween._initted = (!tween._op || tween._pt) && !overwritten;\r\n  },\r\n      _addAliasesToVars = function _addAliasesToVars(targets, vars) {\r\n    var harness = targets[0] ? _getCache(targets[0]).harness : 0,\r\n        propertyAliases = harness && harness.aliases,\r\n        copy,\r\n        p,\r\n        i,\r\n        aliases;\r\n\r\n    if (!propertyAliases) {\r\n      return vars;\r\n    }\r\n\r\n    copy = _merge({}, vars);\r\n\r\n    for (p in propertyAliases) {\r\n      if (p in copy) {\r\n        aliases = propertyAliases[p].split(",");\r\n        i = aliases.length;\r\n\r\n        while (i--) {\r\n          copy[aliases[i]] = copy[p];\r\n        }\r\n      }\r\n    }\r\n\r\n    return copy;\r\n  },\r\n      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {\r\n    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;\r\n  },\r\n      _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",\r\n      _staggerPropsToSkip = (_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger").split(",");\r\n\r\n  var Tween = function (_Animation2) {\r\n    _inheritsLoose(Tween, _Animation2);\r\n\r\n    function Tween(targets, vars, position, skipInherit) {\r\n      var _this3;\r\n\r\n      if (typeof vars === "number") {\r\n        position.duration = vars;\r\n        vars = position;\r\n        position = null;\r\n      }\r\n\r\n      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;\r\n      var _this3$vars = _this3.vars,\r\n          duration = _this3$vars.duration,\r\n          delay = _this3$vars.delay,\r\n          immediateRender = _this3$vars.immediateRender,\r\n          stagger = _this3$vars.stagger,\r\n          overwrite = _this3$vars.overwrite,\r\n          keyframes = _this3$vars.keyframes,\r\n          defaults = _this3$vars.defaults,\r\n          scrollTrigger = _this3$vars.scrollTrigger,\r\n          yoyoEase = _this3$vars.yoyoEase,\r\n          parent = vars.parent || _globalTimeline,\r\n          parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),\r\n          tl,\r\n          i,\r\n          copy,\r\n          l,\r\n          p,\r\n          curTarget,\r\n          staggerFunc,\r\n          staggerVarsToMerge;\r\n      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://greensock.com", !_config.nullTargetWarn) || [];\r\n      _this3._ptLookup = [];\r\n      _this3._overwrite = overwrite;\r\n\r\n      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\r\n        vars = _this3.vars;\r\n        tl = _this3.timeline = new Timeline({\r\n          data: "nested",\r\n          defaults: defaults || {}\r\n        });\r\n        tl.kill();\r\n        tl.parent = tl._dp = _assertThisInitialized(_this3);\r\n        tl._start = 0;\r\n\r\n        if (keyframes) {\r\n          _inheritDefaults(_setDefaults(tl.vars.defaults, {\r\n            ease: "none"\r\n          }));\r\n\r\n          stagger ? parsedTargets.forEach(function (t, i) {\r\n            return keyframes.forEach(function (frame, j) {\r\n              return tl.to(t, frame, j ? ">" : i * stagger);\r\n            });\r\n          }) : keyframes.forEach(function (frame) {\r\n            return tl.to(parsedTargets, frame, ">");\r\n          });\r\n        } else {\r\n          l = parsedTargets.length;\r\n          staggerFunc = stagger ? distribute(stagger) : _emptyFunc;\r\n\r\n          if (_isObject(stagger)) {\r\n            for (p in stagger) {\r\n              if (~_staggerTweenProps.indexOf(p)) {\r\n                staggerVarsToMerge || (staggerVarsToMerge = {});\r\n                staggerVarsToMerge[p] = stagger[p];\r\n              }\r\n            }\r\n          }\r\n\r\n          for (i = 0; i < l; i++) {\r\n            copy = {};\r\n\r\n            for (p in vars) {\r\n              if (_staggerPropsToSkip.indexOf(p) < 0) {\r\n                copy[p] = vars[p];\r\n              }\r\n            }\r\n\r\n            copy.stagger = 0;\r\n            yoyoEase && (copy.yoyoEase = yoyoEase);\r\n            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);\r\n            curTarget = parsedTargets[i];\r\n            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);\r\n            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;\r\n\r\n            if (!stagger && l === 1 && copy.delay) {\r\n              _this3._delay = delay = copy.delay;\r\n              _this3._start += delay;\r\n              copy.delay = 0;\r\n            }\r\n\r\n            tl.to(curTarget, copy, staggerFunc(i, curTarget, parsedTargets));\r\n          }\r\n\r\n          tl.duration() ? duration = delay = 0 : _this3.timeline = 0;\r\n        }\r\n\r\n        duration || _this3.duration(duration = tl.duration());\r\n      } else {\r\n        _this3.timeline = 0;\r\n      }\r\n\r\n      if (overwrite === true && !_suppressOverwrites) {\r\n        _overwritingTween = _assertThisInitialized(_this3);\r\n\r\n        _globalTimeline.killTweensOf(parsedTargets);\r\n\r\n        _overwritingTween = 0;\r\n      }\r\n\r\n      _addToTimeline(parent, _assertThisInitialized(_this3), position);\r\n\r\n      vars.reversed && _this3.reverse();\r\n      vars.paused && _this3.paused(true);\r\n\r\n      if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {\r\n        _this3._tTime = -_tinyNum;\r\n\r\n        _this3.render(Math.max(0, -delay));\r\n      }\r\n\r\n      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);\r\n      return _this3;\r\n    }\r\n\r\n    var _proto3 = Tween.prototype;\r\n\r\n    _proto3.render = function render(totalTime, suppressEvents, force) {\r\n      var prevTime = this._time,\r\n          tDur = this._tDur,\r\n          dur = this._dur,\r\n          tTime = totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,\r\n          time,\r\n          pt,\r\n          iteration,\r\n          cycleDuration,\r\n          prevIteration,\r\n          isYoyo,\r\n          ratio,\r\n          timeline,\r\n          yoyoEase;\r\n\r\n      if (!dur) {\r\n        _renderZeroDurationTween(this, totalTime, suppressEvents, force);\r\n      } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== totalTime < 0) {\r\n        time = tTime;\r\n        timeline = this.timeline;\r\n\r\n        if (this._repeat) {\r\n          cycleDuration = dur + this._rDelay;\r\n\r\n          if (this._repeat < -1 && totalTime < 0) {\r\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\r\n          }\r\n\r\n          time = _roundPrecise(tTime % cycleDuration);\r\n\r\n          if (tTime === tDur) {\r\n            iteration = this._repeat;\r\n            time = dur;\r\n          } else {\r\n            iteration = ~~(tTime / cycleDuration);\r\n\r\n            if (iteration && iteration === tTime / cycleDuration) {\r\n              time = dur;\r\n              iteration--;\r\n            }\r\n\r\n            time > dur && (time = dur);\r\n          }\r\n\r\n          isYoyo = this._yoyo && iteration & 1;\r\n\r\n          if (isYoyo) {\r\n            yoyoEase = this._yEase;\r\n            time = dur - time;\r\n          }\r\n\r\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\r\n\r\n          if (time === prevTime && !force && this._initted) {\r\n            return this;\r\n          }\r\n\r\n          if (iteration !== prevIteration) {\r\n            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);\r\n\r\n            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {\r\n              this._lock = force = 1;\r\n              this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!this._initted) {\r\n          if (_attemptInitTween(this, totalTime < 0 ? totalTime : time, force, suppressEvents)) {\r\n            this._tTime = 0;\r\n            return this;\r\n          }\r\n\r\n          if (dur !== this._dur) {\r\n            return this.render(totalTime, suppressEvents, force);\r\n          }\r\n        }\r\n\r\n        this._tTime = tTime;\r\n        this._time = time;\r\n\r\n        if (!this._act && this._ts) {\r\n          this._act = 1;\r\n          this._lazy = 0;\r\n        }\r\n\r\n        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);\r\n\r\n        if (this._from) {\r\n          this.ratio = ratio = 1 - ratio;\r\n        }\r\n\r\n        if (time && !prevTime && !suppressEvents) {\r\n          _callback(this, "onStart");\r\n\r\n          if (this._tTime !== tTime) {\r\n            return this;\r\n          }\r\n        }\r\n\r\n        pt = this._pt;\r\n\r\n        while (pt) {\r\n          pt.r(ratio, pt.d);\r\n          pt = pt._next;\r\n        }\r\n\r\n        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * ratio, suppressEvents, force) || this._startAt && (this._zTime = totalTime);\r\n\r\n        if (this._onUpdate && !suppressEvents) {\r\n          totalTime < 0 && this._startAt && this._startAt.render(totalTime, true, force);\r\n\r\n          _callback(this, "onUpdate");\r\n        }\r\n\r\n        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");\r\n\r\n        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {\r\n          totalTime < 0 && this._startAt && !this._onUpdate && this._startAt.render(totalTime, true, true);\r\n          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\r\n\r\n          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {\r\n            _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);\r\n\r\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\r\n          }\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    _proto3.targets = function targets() {\r\n      return this._targets;\r\n    };\r\n\r\n    _proto3.invalidate = function invalidate() {\r\n      this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0;\r\n      this._ptLookup = [];\r\n      this.timeline && this.timeline.invalidate();\r\n      return _Animation2.prototype.invalidate.call(this);\r\n    };\r\n\r\n    _proto3.kill = function kill(targets, vars) {\r\n      if (vars === void 0) {\r\n        vars = "all";\r\n      }\r\n\r\n      if (!targets && (!vars || vars === "all")) {\r\n        this._lazy = this._pt = 0;\r\n        return this.parent ? _interrupt(this) : this;\r\n      }\r\n\r\n      if (this.timeline) {\r\n        var tDur = this.timeline.totalDuration();\r\n        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);\r\n        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1);\r\n        return this;\r\n      }\r\n\r\n      var parsedTargets = this._targets,\r\n          killingTargets = targets ? toArray(targets) : parsedTargets,\r\n          propTweenLookup = this._ptLookup,\r\n          firstPT = this._pt,\r\n          overwrittenProps,\r\n          curLookup,\r\n          curOverwriteProps,\r\n          props,\r\n          p,\r\n          pt,\r\n          i;\r\n\r\n      if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {\r\n        vars === "all" && (this._pt = 0);\r\n        return _interrupt(this);\r\n      }\r\n\r\n      overwrittenProps = this._op = this._op || [];\r\n\r\n      if (vars !== "all") {\r\n        if (_isString(vars)) {\r\n          p = {};\r\n\r\n          _forEachName(vars, function (name) {\r\n            return p[name] = 1;\r\n          });\r\n\r\n          vars = p;\r\n        }\r\n\r\n        vars = _addAliasesToVars(parsedTargets, vars);\r\n      }\r\n\r\n      i = parsedTargets.length;\r\n\r\n      while (i--) {\r\n        if (~killingTargets.indexOf(parsedTargets[i])) {\r\n          curLookup = propTweenLookup[i];\r\n\r\n          if (vars === "all") {\r\n            overwrittenProps[i] = vars;\r\n            props = curLookup;\r\n            curOverwriteProps = {};\r\n          } else {\r\n            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};\r\n            props = vars;\r\n          }\r\n\r\n          for (p in props) {\r\n            pt = curLookup && curLookup[p];\r\n\r\n            if (pt) {\r\n              if (!("kill" in pt.d) || pt.d.kill(p) === true) {\r\n                _removeLinkedListItem(this, pt, "_pt");\r\n              }\r\n\r\n              delete curLookup[p];\r\n            }\r\n\r\n            if (curOverwriteProps !== "all") {\r\n              curOverwriteProps[p] = 1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this._initted && !this._pt && firstPT && _interrupt(this);\r\n      return this;\r\n    };\r\n\r\n    Tween.to = function to(targets, vars) {\r\n      return new Tween(targets, vars, arguments[2]);\r\n    };\r\n\r\n    Tween.from = function from(targets, vars) {\r\n      return _createTweenType(1, arguments);\r\n    };\r\n\r\n    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {\r\n      return new Tween(callback, 0, {\r\n        immediateRender: false,\r\n        lazy: false,\r\n        overwrite: false,\r\n        delay: delay,\r\n        onComplete: callback,\r\n        onReverseComplete: callback,\r\n        onCompleteParams: params,\r\n        onReverseCompleteParams: params,\r\n        callbackScope: scope\r\n      });\r\n    };\r\n\r\n    Tween.fromTo = function fromTo(targets, fromVars, toVars) {\r\n      return _createTweenType(2, arguments);\r\n    };\r\n\r\n    Tween.set = function set(targets, vars) {\r\n      vars.duration = 0;\r\n      vars.repeatDelay || (vars.repeat = 0);\r\n      return new Tween(targets, vars);\r\n    };\r\n\r\n    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {\r\n      return _globalTimeline.killTweensOf(targets, props, onlyActive);\r\n    };\r\n\r\n    return Tween;\r\n  }(Animation);\r\n\r\n  _setDefaults(Tween.prototype, {\r\n    _targets: [],\r\n    _lazy: 0,\r\n    _startAt: 0,\r\n    _op: 0,\r\n    _onInit: 0\r\n  });\r\n\r\n  _forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {\r\n    Tween[name] = function () {\r\n      var tl = new Timeline(),\r\n          params = _slice.call(arguments, 0);\r\n\r\n      params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);\r\n      return tl[name].apply(tl, params);\r\n    };\r\n  });\r\n\r\n  var _setterPlain = function _setterPlain(target, property, value) {\r\n    return target[property] = value;\r\n  },\r\n      _setterFunc = function _setterFunc(target, property, value) {\r\n    return target[property](value);\r\n  },\r\n      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {\r\n    return target[property](data.fp, value);\r\n  },\r\n      _setterAttribute = function _setterAttribute(target, property, value) {\r\n    return target.setAttribute(property, value);\r\n  },\r\n      _getSetter = function _getSetter(target, property) {\r\n    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;\r\n  },\r\n      _renderPlain = function _renderPlain(ratio, data) {\r\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);\r\n  },\r\n      _renderBoolean = function _renderBoolean(ratio, data) {\r\n    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);\r\n  },\r\n      _renderComplexString = function _renderComplexString(ratio, data) {\r\n    var pt = data._pt,\r\n        s = "";\r\n\r\n    if (!ratio && data.b) {\r\n      s = data.b;\r\n    } else if (ratio === 1 && data.e) {\r\n      s = data.e;\r\n    } else {\r\n      while (pt) {\r\n        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s;\r\n        pt = pt._next;\r\n      }\r\n\r\n      s += data.c;\r\n    }\r\n\r\n    data.set(data.t, data.p, s, data);\r\n  },\r\n      _renderPropTweens = function _renderPropTweens(ratio, data) {\r\n    var pt = data._pt;\r\n\r\n    while (pt) {\r\n      pt.r(ratio, pt.d);\r\n      pt = pt._next;\r\n    }\r\n  },\r\n      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {\r\n    var pt = this._pt,\r\n        next;\r\n\r\n    while (pt) {\r\n      next = pt._next;\r\n      pt.p === property && pt.modifier(modifier, tween, target);\r\n      pt = next;\r\n    }\r\n  },\r\n      _killPropTweensOf = function _killPropTweensOf(property) {\r\n    var pt = this._pt,\r\n        hasNonDependentRemaining,\r\n        next;\r\n\r\n    while (pt) {\r\n      next = pt._next;\r\n\r\n      if (pt.p === property && !pt.op || pt.op === property) {\r\n        _removeLinkedListItem(this, pt, "_pt");\r\n      } else if (!pt.dep) {\r\n        hasNonDependentRemaining = 1;\r\n      }\r\n\r\n      pt = next;\r\n    }\r\n\r\n    return !hasNonDependentRemaining;\r\n  },\r\n      _setterWithModifier = function _setterWithModifier(target, property, value, data) {\r\n    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);\r\n  },\r\n      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {\r\n    var pt = parent._pt,\r\n        next,\r\n        pt2,\r\n        first,\r\n        last;\r\n\r\n    while (pt) {\r\n      next = pt._next;\r\n      pt2 = first;\r\n\r\n      while (pt2 && pt2.pr > pt.pr) {\r\n        pt2 = pt2._next;\r\n      }\r\n\r\n      if (pt._prev = pt2 ? pt2._prev : last) {\r\n        pt._prev._next = pt;\r\n      } else {\r\n        first = pt;\r\n      }\r\n\r\n      if (pt._next = pt2) {\r\n        pt2._prev = pt;\r\n      } else {\r\n        last = pt;\r\n      }\r\n\r\n      pt = next;\r\n    }\r\n\r\n    parent._pt = first;\r\n  };\r\n\r\n  var PropTween = function () {\r\n    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {\r\n      this.t = target;\r\n      this.s = start;\r\n      this.c = change;\r\n      this.p = prop;\r\n      this.r = renderer || _renderPlain;\r\n      this.d = data || this;\r\n      this.set = setter || _setterPlain;\r\n      this.pr = priority || 0;\r\n      this._next = next;\r\n\r\n      if (next) {\r\n        next._prev = this;\r\n      }\r\n    }\r\n\r\n    var _proto4 = PropTween.prototype;\r\n\r\n    _proto4.modifier = function modifier(func, tween, target) {\r\n      this.mSet = this.mSet || this.set;\r\n      this.set = _setterWithModifier;\r\n      this.m = func;\r\n      this.mt = target;\r\n      this.tween = tween;\r\n    };\r\n\r\n    return PropTween;\r\n  }();\r\n\r\n  _forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {\r\n    return _reservedProps[name] = 1;\r\n  });\r\n\r\n  _globals.TweenMax = _globals.TweenLite = Tween;\r\n  _globals.TimelineLite = _globals.TimelineMax = Timeline;\r\n  _globalTimeline = new Timeline({\r\n    sortChildren: false,\r\n    defaults: _defaults,\r\n    autoRemoveChildren: true,\r\n    id: "root",\r\n    smoothChildTiming: true\r\n  });\r\n  _config.stringFilter = _colorStringFilter;\r\n  var _gsap = {\r\n    registerPlugin: function registerPlugin() {\r\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n        args[_key2] = arguments[_key2];\r\n      }\r\n\r\n      args.forEach(function (config) {\r\n        return _createPlugin(config);\r\n      });\r\n    },\r\n    timeline: function timeline(vars) {\r\n      return new Timeline(vars);\r\n    },\r\n    getTweensOf: function getTweensOf(targets, onlyActive) {\r\n      return _globalTimeline.getTweensOf(targets, onlyActive);\r\n    },\r\n    getProperty: function getProperty(target, property, unit, uncache) {\r\n      _isString(target) && (target = toArray(target)[0]);\r\n\r\n      var getter = _getCache(target || {}).get,\r\n          format = unit ? _passThrough : _numericIfPossible;\r\n\r\n      unit === "native" && (unit = "");\r\n      return !target ? target : !property ? function (property, unit, uncache) {\r\n        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\r\n      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\r\n    },\r\n    quickSetter: function quickSetter(target, property, unit) {\r\n      target = toArray(target);\r\n\r\n      if (target.length > 1) {\r\n        var setters = target.map(function (t) {\r\n          return gsap.quickSetter(t, property, unit);\r\n        }),\r\n            l = setters.length;\r\n        return function (value) {\r\n          var i = l;\r\n\r\n          while (i--) {\r\n            setters[i](value);\r\n          }\r\n        };\r\n      }\r\n\r\n      target = target[0] || {};\r\n\r\n      var Plugin = _plugins[property],\r\n          cache = _getCache(target),\r\n          p = cache.harness && (cache.harness.aliases || {})[property] || property,\r\n          setter = Plugin ? function (value) {\r\n        var p = new Plugin();\r\n        _quickTween._pt = 0;\r\n        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);\r\n        p.render(1, p);\r\n        _quickTween._pt && _renderPropTweens(1, _quickTween);\r\n      } : cache.set(target, p);\r\n\r\n      return Plugin ? setter : function (value) {\r\n        return setter(target, p, unit ? value + unit : value, cache, 1);\r\n      };\r\n    },\r\n    isTweening: function isTweening(targets) {\r\n      return _globalTimeline.getTweensOf(targets, true).length > 0;\r\n    },\r\n    defaults: function defaults(value) {\r\n      value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));\r\n      return _mergeDeep(_defaults, value || {});\r\n    },\r\n    config: function config(value) {\r\n      return _mergeDeep(_config, value || {});\r\n    },\r\n    registerEffect: function registerEffect(_ref3) {\r\n      var name = _ref3.name,\r\n          effect = _ref3.effect,\r\n          plugins = _ref3.plugins,\r\n          defaults = _ref3.defaults,\r\n          extendTimeline = _ref3.extendTimeline;\r\n      (plugins || "").split(",").forEach(function (pluginName) {\r\n        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");\r\n      });\r\n\r\n      _effects[name] = function (targets, vars, tl) {\r\n        return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);\r\n      };\r\n\r\n      if (extendTimeline) {\r\n        Timeline.prototype[name] = function (targets, vars, position) {\r\n          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);\r\n        };\r\n      }\r\n    },\r\n    registerEase: function registerEase(name, ease) {\r\n      _easeMap[name] = _parseEase(ease);\r\n    },\r\n    parseEase: function parseEase(ease, defaultEase) {\r\n      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;\r\n    },\r\n    getById: function getById(id) {\r\n      return _globalTimeline.getById(id);\r\n    },\r\n    exportRoot: function exportRoot(vars, includeDelayedCalls) {\r\n      if (vars === void 0) {\r\n        vars = {};\r\n      }\r\n\r\n      var tl = new Timeline(vars),\r\n          child,\r\n          next;\r\n      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);\r\n\r\n      _globalTimeline.remove(tl);\r\n\r\n      tl._dp = 0;\r\n      tl._time = tl._tTime = _globalTimeline._time;\r\n      child = _globalTimeline._first;\r\n\r\n      while (child) {\r\n        next = child._next;\r\n\r\n        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {\r\n          _addToTimeline(tl, child, child._start - child._delay);\r\n        }\r\n\r\n        child = next;\r\n      }\r\n\r\n      _addToTimeline(_globalTimeline, tl, 0);\r\n\r\n      return tl;\r\n    },\r\n    utils: {\r\n      wrap: wrap,\r\n      wrapYoyo: wrapYoyo,\r\n      distribute: distribute,\r\n      random: random,\r\n      snap: snap,\r\n      normalize: normalize,\r\n      getUnit: getUnit,\r\n      clamp: clamp,\r\n      splitColor: splitColor,\r\n      toArray: toArray,\r\n      selector: selector,\r\n      mapRange: mapRange,\r\n      pipe: pipe,\r\n      unitize: unitize,\r\n      interpolate: interpolate,\r\n      shuffle: shuffle\r\n    },\r\n    install: _install,\r\n    effects: _effects,\r\n    ticker: _ticker,\r\n    updateRoot: Timeline.updateRoot,\r\n    plugins: _plugins,\r\n    globalTimeline: _globalTimeline,\r\n    core: {\r\n      PropTween: PropTween,\r\n      globals: _addGlobal,\r\n      Tween: Tween,\r\n      Timeline: Timeline,\r\n      Animation: Animation,\r\n      getCache: _getCache,\r\n      _removeLinkedListItem: _removeLinkedListItem,\r\n      suppressOverwrites: function suppressOverwrites(value) {\r\n        return _suppressOverwrites = value;\r\n      }\r\n    }\r\n  };\r\n\r\n  _forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {\r\n    return _gsap[name] = Tween[name];\r\n  });\r\n\r\n  _ticker.add(Timeline.updateRoot);\r\n\r\n  _quickTween = _gsap.to({}, {\r\n    duration: 0\r\n  });\r\n\r\n  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {\r\n    var pt = plugin._pt;\r\n\r\n    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {\r\n      pt = pt._next;\r\n    }\r\n\r\n    return pt;\r\n  },\r\n      _addModifiers = function _addModifiers(tween, modifiers) {\r\n    var targets = tween._targets,\r\n        p,\r\n        i,\r\n        pt;\r\n\r\n    for (p in modifiers) {\r\n      i = targets.length;\r\n\r\n      while (i--) {\r\n        pt = tween._ptLookup[i][p];\r\n\r\n        if (pt && (pt = pt.d)) {\r\n          if (pt._pt) {\r\n            pt = _getPluginPropTween(pt, p);\r\n          }\r\n\r\n          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);\r\n        }\r\n      }\r\n    }\r\n  },\r\n      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {\r\n    return {\r\n      name: name,\r\n      rawVars: 1,\r\n      init: function init(target, vars, tween) {\r\n        tween._onInit = function (tween) {\r\n          var temp, p;\r\n\r\n          if (_isString(vars)) {\r\n            temp = {};\r\n\r\n            _forEachName(vars, function (name) {\r\n              return temp[name] = 1;\r\n            });\r\n\r\n            vars = temp;\r\n          }\r\n\r\n          if (modifier) {\r\n            temp = {};\r\n\r\n            for (p in vars) {\r\n              temp[p] = modifier(vars[p]);\r\n            }\r\n\r\n            vars = temp;\r\n          }\r\n\r\n          _addModifiers(tween, vars);\r\n        };\r\n      }\r\n    };\r\n  };\r\n\r\n  var gsap = _gsap.registerPlugin({\r\n    name: "attr",\r\n    init: function init(target, vars, tween, index, targets) {\r\n      var p, pt;\r\n\r\n      for (p in vars) {\r\n        pt = this.add(target, "setAttribute", (target.getAttribute(p) || 0) + "", vars[p], index, targets, 0, 0, p);\r\n        pt && (pt.op = p);\r\n\r\n        this._props.push(p);\r\n      }\r\n    }\r\n  }, {\r\n    name: "endArray",\r\n    init: function init(target, value) {\r\n      var i = value.length;\r\n\r\n      while (i--) {\r\n        this.add(target, i, target[i] || 0, value[i]);\r\n      }\r\n    }\r\n  }, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap;\r\n  Tween.version = Timeline.version = gsap.version = "3.8.0";\r\n  _coreReady = 1;\r\n  _windowExists() && _wake();\r\n  var Power0 = _easeMap.Power0,\r\n      Power1 = _easeMap.Power1,\r\n      Power2 = _easeMap.Power2,\r\n      Power3 = _easeMap.Power3,\r\n      Power4 = _easeMap.Power4,\r\n      Linear = _easeMap.Linear,\r\n      Quad = _easeMap.Quad,\r\n      Cubic = _easeMap.Cubic,\r\n      Quart = _easeMap.Quart,\r\n      Quint = _easeMap.Quint,\r\n      Strong = _easeMap.Strong,\r\n      Elastic = _easeMap.Elastic,\r\n      Back = _easeMap.Back,\r\n      SteppedEase = _easeMap.SteppedEase,\r\n      Bounce = _easeMap.Bounce,\r\n      Sine = _easeMap.Sine,\r\n      Expo = _easeMap.Expo,\r\n      Circ = _easeMap.Circ;\r\n\r\n  var _win$1,\r\n      _doc$1,\r\n      _docElement,\r\n      _pluginInitted,\r\n      _tempDiv,\r\n      _tempDivStyler,\r\n      _recentSetterPlugin,\r\n      _windowExists$1 = function _windowExists() {\r\n    return typeof window !== "undefined";\r\n  },\r\n      _transformProps = {},\r\n      _RAD2DEG = 180 / Math.PI,\r\n      _DEG2RAD = Math.PI / 180,\r\n      _atan2 = Math.atan2,\r\n      _bigNum$1 = 1e8,\r\n      _capsExp = /([A-Z])/g,\r\n      _horizontalExp = /(?:left|right|width|margin|padding|x)/i,\r\n      _complexExp = /[\\s,\\(]\\S/,\r\n      _propertyAliases = {\r\n    autoAlpha: "opacity,visibility",\r\n    scale: "scaleX,scaleY",\r\n    alpha: "opacity"\r\n  },\r\n      _renderCSSProp = function _renderCSSProp(ratio, data) {\r\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\r\n  },\r\n      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\r\n    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\r\n  },\r\n      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\r\n    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\r\n  },\r\n      _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\r\n    var value = data.s + data.c * ratio;\r\n    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\r\n  },\r\n      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\r\n    return data.set(data.t, data.p, ratio ? data.e : data.b, data);\r\n  },\r\n      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\r\n    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\r\n  },\r\n      _setterCSSStyle = function _setterCSSStyle(target, property, value) {\r\n    return target.style[property] = value;\r\n  },\r\n      _setterCSSProp = function _setterCSSProp(target, property, value) {\r\n    return target.style.setProperty(property, value);\r\n  },\r\n      _setterTransform = function _setterTransform(target, property, value) {\r\n    return target._gsap[property] = value;\r\n  },\r\n      _setterScale = function _setterScale(target, property, value) {\r\n    return target._gsap.scaleX = target._gsap.scaleY = value;\r\n  },\r\n      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\r\n    var cache = target._gsap;\r\n    cache.scaleX = cache.scaleY = value;\r\n    cache.renderTransform(ratio, cache);\r\n  },\r\n      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\r\n    var cache = target._gsap;\r\n    cache[property] = value;\r\n    cache.renderTransform(ratio, cache);\r\n  },\r\n      _transformProp = "transform",\r\n      _transformOriginProp = _transformProp + "Origin",\r\n      _supports3D,\r\n      _createElement = function _createElement(type, ns) {\r\n    var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc$1.createElement(type);\r\n    return e.style ? e : _doc$1.createElement(type);\r\n  },\r\n      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\r\n    var cs = getComputedStyle(target);\r\n    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || "";\r\n  },\r\n      _prefixes = "O,Moz,ms,Ms,Webkit".split(","),\r\n      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\r\n    var e = element || _tempDiv,\r\n        s = e.style,\r\n        i = 5;\r\n\r\n    if (property in s && !preferPrefix) {\r\n      return property;\r\n    }\r\n\r\n    property = property.charAt(0).toUpperCase() + property.substr(1);\r\n\r\n    while (i-- && !(_prefixes[i] + property in s)) {}\r\n\r\n    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;\r\n  },\r\n      _initCore = function _initCore() {\r\n    if (_windowExists$1() && window.document) {\r\n      _win$1 = window;\r\n      _doc$1 = _win$1.document;\r\n      _docElement = _doc$1.documentElement;\r\n      _tempDiv = _createElement("div") || {\r\n        style: {}\r\n      };\r\n      _tempDivStyler = _createElement("div");\r\n      _transformProp = _checkPropPrefix(_transformProp);\r\n      _transformOriginProp = _transformProp + "Origin";\r\n      _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0";\r\n      _supports3D = !!_checkPropPrefix("perspective");\r\n      _pluginInitted = 1;\r\n    }\r\n  },\r\n      _getBBoxHack = function _getBBoxHack(swapIfPossible) {\r\n    var svg = _createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),\r\n        oldParent = this.parentNode,\r\n        oldSibling = this.nextSibling,\r\n        oldCSS = this.style.cssText,\r\n        bbox;\r\n\r\n    _docElement.appendChild(svg);\r\n\r\n    svg.appendChild(this);\r\n    this.style.display = "block";\r\n\r\n    if (swapIfPossible) {\r\n      try {\r\n        bbox = this.getBBox();\r\n        this._gsapBBox = this.getBBox;\r\n        this.getBBox = _getBBoxHack;\r\n      } catch (e) {}\r\n    } else if (this._gsapBBox) {\r\n      bbox = this._gsapBBox();\r\n    }\r\n\r\n    if (oldParent) {\r\n      if (oldSibling) {\r\n        oldParent.insertBefore(this, oldSibling);\r\n      } else {\r\n        oldParent.appendChild(this);\r\n      }\r\n    }\r\n\r\n    _docElement.removeChild(svg);\r\n\r\n    this.style.cssText = oldCSS;\r\n    return bbox;\r\n  },\r\n      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\r\n    var i = attributesArray.length;\r\n\r\n    while (i--) {\r\n      if (target.hasAttribute(attributesArray[i])) {\r\n        return target.getAttribute(attributesArray[i]);\r\n      }\r\n    }\r\n  },\r\n      _getBBox = function _getBBox(target) {\r\n    var bounds;\r\n\r\n    try {\r\n      bounds = target.getBBox();\r\n    } catch (error) {\r\n      bounds = _getBBoxHack.call(target, true);\r\n    }\r\n\r\n    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));\r\n    return bounds && !bounds.width && !bounds.x && !bounds.y ? {\r\n      x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,\r\n      y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,\r\n      width: 0,\r\n      height: 0\r\n    } : bounds;\r\n  },\r\n      _isSVG = function _isSVG(e) {\r\n    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\r\n  },\r\n      _removeProperty = function _removeProperty(target, property) {\r\n    if (property) {\r\n      var style = target.style;\r\n\r\n      if (property in _transformProps && property !== _transformOriginProp) {\r\n        property = _transformProp;\r\n      }\r\n\r\n      if (style.removeProperty) {\r\n        if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") {\r\n          property = "-" + property;\r\n        }\r\n\r\n        style.removeProperty(property.replace(_capsExp, "-$1").toLowerCase());\r\n      } else {\r\n        style.removeAttribute(property);\r\n      }\r\n    }\r\n  },\r\n      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\r\n    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\r\n    plugin._pt = pt;\r\n    pt.b = beginning;\r\n    pt.e = end;\r\n\r\n    plugin._props.push(property);\r\n\r\n    return pt;\r\n  },\r\n      _nonConvertibleUnits = {\r\n    deg: 1,\r\n    rad: 1,\r\n    turn: 1\r\n  },\r\n      _convertToUnit = function _convertToUnit(target, property, value, unit) {\r\n    var curValue = parseFloat(value) || 0,\r\n        curUnit = (value + "").trim().substr((curValue + "").length) || "px",\r\n        style = _tempDiv.style,\r\n        horizontal = _horizontalExp.test(property),\r\n        isRootSVG = target.tagName.toLowerCase() === "svg",\r\n        measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),\r\n        amount = 100,\r\n        toPixels = unit === "px",\r\n        toPercent = unit === "%",\r\n        px,\r\n        parent,\r\n        cache,\r\n        isSVG;\r\n\r\n    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\r\n      return curValue;\r\n    }\r\n\r\n    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));\r\n    isSVG = target.getCTM && _isSVG(target);\r\n\r\n    if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {\r\n      px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];\r\n      return _round(toPercent ? curValue / px * amount : curValue / 100 * px);\r\n    }\r\n\r\n    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);\r\n    parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;\r\n\r\n    if (isSVG) {\r\n      parent = (target.ownerSVGElement || {}).parentNode;\r\n    }\r\n\r\n    if (!parent || parent === _doc$1 || !parent.appendChild) {\r\n      parent = _doc$1.body;\r\n    }\r\n\r\n    cache = parent._gsap;\r\n\r\n    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time) {\r\n      return _round(curValue / cache.width * amount);\r\n    } else {\r\n      (toPercent || curUnit === "%") && (style.position = _getComputedProperty(target, "position"));\r\n      parent === target && (style.position = "static");\r\n      parent.appendChild(_tempDiv);\r\n      px = _tempDiv[measureProperty];\r\n      parent.removeChild(_tempDiv);\r\n      style.position = "absolute";\r\n\r\n      if (horizontal && toPercent) {\r\n        cache = _getCache(parent);\r\n        cache.time = _ticker.time;\r\n        cache.width = parent[measureProperty];\r\n      }\r\n    }\r\n\r\n    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\r\n  },\r\n      _get = function _get(target, property, unit, uncache) {\r\n    var value;\r\n    _pluginInitted || _initCore();\r\n\r\n    if (property in _propertyAliases && property !== "transform") {\r\n      property = _propertyAliases[property];\r\n\r\n      if (~property.indexOf(",")) {\r\n        property = property.split(",")[0];\r\n      }\r\n    }\r\n\r\n    if (_transformProps[property] && property !== "transform") {\r\n      value = _parseTransform(target, uncache);\r\n      value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";\r\n    } else {\r\n      value = target.style[property];\r\n\r\n      if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {\r\n        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0);\r\n      }\r\n    }\r\n\r\n    return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;\r\n  },\r\n      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\r\n    if (!start || start === "none") {\r\n      var p = _checkPropPrefix(prop, target, 1),\r\n          s = p && _getComputedProperty(target, p, 1);\r\n\r\n      if (s && s !== start) {\r\n        prop = p;\r\n        start = s;\r\n      } else if (prop === "borderColor") {\r\n        start = _getComputedProperty(target, "borderTopColor");\r\n      }\r\n    }\r\n\r\n    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),\r\n        index = 0,\r\n        matchIndex = 0,\r\n        a,\r\n        result,\r\n        startValues,\r\n        startNum,\r\n        color,\r\n        startValue,\r\n        endValue,\r\n        endNum,\r\n        chunk,\r\n        endUnit,\r\n        startUnit,\r\n        relative,\r\n        endValues;\r\n    pt.b = start;\r\n    pt.e = end;\r\n    start += "";\r\n    end += "";\r\n\r\n    if (end === "auto") {\r\n      target.style[prop] = end;\r\n      end = _getComputedProperty(target, prop) || end;\r\n      target.style[prop] = start;\r\n    }\r\n\r\n    a = [start, end];\r\n\r\n    _colorStringFilter(a);\r\n\r\n    start = a[0];\r\n    end = a[1];\r\n    startValues = start.match(_numWithUnitExp) || [];\r\n    endValues = end.match(_numWithUnitExp) || [];\r\n\r\n    if (endValues.length) {\r\n      while (result = _numWithUnitExp.exec(end)) {\r\n        endValue = result[0];\r\n        chunk = end.substring(index, result.index);\r\n\r\n        if (color) {\r\n          color = (color + 1) % 5;\r\n        } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {\r\n          color = 1;\r\n        }\r\n\r\n        if (endValue !== (startValue = startValues[matchIndex++] || "")) {\r\n          startNum = parseFloat(startValue) || 0;\r\n          startUnit = startValue.substr((startNum + "").length);\r\n          relative = endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;\r\n\r\n          if (relative) {\r\n            endValue = endValue.substr(2);\r\n          }\r\n\r\n          endNum = parseFloat(endValue);\r\n          endUnit = endValue.substr((endNum + "").length);\r\n          index = _numWithUnitExp.lastIndex - endUnit.length;\r\n\r\n          if (!endUnit) {\r\n            endUnit = endUnit || _config.units[prop] || startUnit;\r\n\r\n            if (index === end.length) {\r\n              end += endUnit;\r\n              pt.e += endUnit;\r\n            }\r\n          }\r\n\r\n          if (startUnit !== endUnit) {\r\n            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\r\n          }\r\n\r\n          pt._pt = {\r\n            _next: pt._pt,\r\n            p: chunk || matchIndex === 1 ? chunk : ",",\r\n            s: startNum,\r\n            c: relative ? relative * endNum : endNum - startNum,\r\n            m: color && color < 4 || prop === "zIndex" ? Math.round : 0\r\n          };\r\n        }\r\n      }\r\n\r\n      pt.c = index < end.length ? end.substring(index, end.length) : "";\r\n    } else {\r\n      pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\r\n    }\r\n\r\n    _relExp.test(end) && (pt.e = 0);\r\n    this._pt = pt;\r\n    return pt;\r\n  },\r\n      _keywordToPercent = {\r\n    top: "0%",\r\n    bottom: "100%",\r\n    left: "0%",\r\n    right: "100%",\r\n    center: "50%"\r\n  },\r\n      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\r\n    var split = value.split(" "),\r\n        x = split[0],\r\n        y = split[1] || "50%";\r\n\r\n    if (x === "top" || x === "bottom" || y === "left" || y === "right") {\r\n      value = x;\r\n      x = y;\r\n      y = value;\r\n    }\r\n\r\n    split[0] = _keywordToPercent[x] || x;\r\n    split[1] = _keywordToPercent[y] || y;\r\n    return split.join(" ");\r\n  },\r\n      _renderClearProps = function _renderClearProps(ratio, data) {\r\n    if (data.tween && data.tween._time === data.tween._dur) {\r\n      var target = data.t,\r\n          style = target.style,\r\n          props = data.u,\r\n          cache = target._gsap,\r\n          prop,\r\n          clearTransforms,\r\n          i;\r\n\r\n      if (props === "all" || props === true) {\r\n        style.cssText = "";\r\n        clearTransforms = 1;\r\n      } else {\r\n        props = props.split(",");\r\n        i = props.length;\r\n\r\n        while (--i > -1) {\r\n          prop = props[i];\r\n\r\n          if (_transformProps[prop]) {\r\n            clearTransforms = 1;\r\n            prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;\r\n          }\r\n\r\n          _removeProperty(target, prop);\r\n        }\r\n      }\r\n\r\n      if (clearTransforms) {\r\n        _removeProperty(target, _transformProp);\r\n\r\n        if (cache) {\r\n          cache.svg && target.removeAttribute("transform");\r\n\r\n          _parseTransform(target, 1);\r\n\r\n          cache.uncache = 1;\r\n        }\r\n      }\r\n    }\r\n  },\r\n      _specialProps = {\r\n    clearProps: function clearProps(plugin, target, property, endValue, tween) {\r\n      if (tween.data !== "isFromStart") {\r\n        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\r\n        pt.u = endValue;\r\n        pt.pr = -10;\r\n        pt.tween = tween;\r\n\r\n        plugin._props.push(property);\r\n\r\n        return 1;\r\n      }\r\n    }\r\n  },\r\n      _identity2DMatrix = [1, 0, 0, 1, 0, 0],\r\n      _rotationalProperties = {},\r\n      _isNullTransform = function _isNullTransform(value) {\r\n    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;\r\n  },\r\n      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\r\n    var matrixString = _getComputedProperty(target, _transformProp);\r\n\r\n    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);\r\n  },\r\n      _getMatrix = function _getMatrix(target, force2D) {\r\n    var cache = target._gsap || _getCache(target),\r\n        style = target.style,\r\n        matrix = _getComputedTransformMatrixAsArray(target),\r\n        parent,\r\n        nextSibling,\r\n        temp,\r\n        addedToDOM;\r\n\r\n    if (cache.svg && target.getAttribute("transform")) {\r\n      temp = target.transform.baseVal.consolidate().matrix;\r\n      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];\r\n      return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;\r\n    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\r\n      temp = style.display;\r\n      style.display = "block";\r\n      parent = target.parentNode;\r\n\r\n      if (!parent || !target.offsetParent) {\r\n        addedToDOM = 1;\r\n        nextSibling = target.nextSibling;\r\n\r\n        _docElement.appendChild(target);\r\n      }\r\n\r\n      matrix = _getComputedTransformMatrixAsArray(target);\r\n      temp ? style.display = temp : _removeProperty(target, "display");\r\n\r\n      if (addedToDOM) {\r\n        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\r\n      }\r\n    }\r\n\r\n    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;\r\n  },\r\n      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\r\n    var cache = target._gsap,\r\n        matrix = matrixArray || _getMatrix(target, true),\r\n        xOriginOld = cache.xOrigin || 0,\r\n        yOriginOld = cache.yOrigin || 0,\r\n        xOffsetOld = cache.xOffset || 0,\r\n        yOffsetOld = cache.yOffset || 0,\r\n        a = matrix[0],\r\n        b = matrix[1],\r\n        c = matrix[2],\r\n        d = matrix[3],\r\n        tx = matrix[4],\r\n        ty = matrix[5],\r\n        originSplit = origin.split(" "),\r\n        xOrigin = parseFloat(originSplit[0]) || 0,\r\n        yOrigin = parseFloat(originSplit[1]) || 0,\r\n        bounds,\r\n        determinant,\r\n        x,\r\n        y;\r\n\r\n    if (!originIsAbsolute) {\r\n      bounds = _getBBox(target);\r\n      xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);\r\n      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);\r\n    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\r\n      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\r\n      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\r\n      xOrigin = x;\r\n      yOrigin = y;\r\n    }\r\n\r\n    if (smooth || smooth !== false && cache.smooth) {\r\n      tx = xOrigin - xOriginOld;\r\n      ty = yOrigin - yOriginOld;\r\n      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\r\n      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\r\n    } else {\r\n      cache.xOffset = cache.yOffset = 0;\r\n    }\r\n\r\n    cache.xOrigin = xOrigin;\r\n    cache.yOrigin = yOrigin;\r\n    cache.smooth = !!smooth;\r\n    cache.origin = origin;\r\n    cache.originIsAbsolute = !!originIsAbsolute;\r\n    target.style[_transformOriginProp] = "0px 0px";\r\n\r\n    if (pluginToAddPropTweensTo) {\r\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);\r\n\r\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);\r\n\r\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);\r\n\r\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);\r\n    }\r\n\r\n    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);\r\n  },\r\n      _parseTransform = function _parseTransform(target, uncache) {\r\n    var cache = target._gsap || new GSCache(target);\r\n\r\n    if ("x" in cache && !uncache && !cache.uncache) {\r\n      return cache;\r\n    }\r\n\r\n    var style = target.style,\r\n        invertedScaleX = cache.scaleX < 0,\r\n        px = "px",\r\n        deg = "deg",\r\n        origin = _getComputedProperty(target, _transformOriginProp) || "0",\r\n        x,\r\n        y,\r\n        z,\r\n        scaleX,\r\n        scaleY,\r\n        rotation,\r\n        rotationX,\r\n        rotationY,\r\n        skewX,\r\n        skewY,\r\n        perspective,\r\n        xOrigin,\r\n        yOrigin,\r\n        matrix,\r\n        angle,\r\n        cos,\r\n        sin,\r\n        a,\r\n        b,\r\n        c,\r\n        d,\r\n        a12,\r\n        a22,\r\n        t1,\r\n        t2,\r\n        t3,\r\n        a13,\r\n        a23,\r\n        a33,\r\n        a42,\r\n        a43,\r\n        a32;\r\n    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\r\n    scaleX = scaleY = 1;\r\n    cache.svg = !!(target.getCTM && _isSVG(target));\r\n    matrix = _getMatrix(target, cache.svg);\r\n\r\n    if (cache.svg) {\r\n      t1 = (!cache.uncache || origin === "0px 0px") && !uncache && target.getAttribute("data-svg-origin");\r\n\r\n      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\r\n    }\r\n\r\n    xOrigin = cache.xOrigin || 0;\r\n    yOrigin = cache.yOrigin || 0;\r\n\r\n    if (matrix !== _identity2DMatrix) {\r\n      a = matrix[0];\r\n      b = matrix[1];\r\n      c = matrix[2];\r\n      d = matrix[3];\r\n      x = a12 = matrix[4];\r\n      y = a22 = matrix[5];\r\n\r\n      if (matrix.length === 6) {\r\n        scaleX = Math.sqrt(a * a + b * b);\r\n        scaleY = Math.sqrt(d * d + c * c);\r\n        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;\r\n        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\r\n        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));\r\n\r\n        if (cache.svg) {\r\n          x -= xOrigin - (xOrigin * a + yOrigin * c);\r\n          y -= yOrigin - (xOrigin * b + yOrigin * d);\r\n        }\r\n      } else {\r\n        a32 = matrix[6];\r\n        a42 = matrix[7];\r\n        a13 = matrix[8];\r\n        a23 = matrix[9];\r\n        a33 = matrix[10];\r\n        a43 = matrix[11];\r\n        x = matrix[12];\r\n        y = matrix[13];\r\n        z = matrix[14];\r\n        angle = _atan2(a32, a33);\r\n        rotationX = angle * _RAD2DEG;\r\n\r\n        if (angle) {\r\n          cos = Math.cos(-angle);\r\n          sin = Math.sin(-angle);\r\n          t1 = a12 * cos + a13 * sin;\r\n          t2 = a22 * cos + a23 * sin;\r\n          t3 = a32 * cos + a33 * sin;\r\n          a13 = a12 * -sin + a13 * cos;\r\n          a23 = a22 * -sin + a23 * cos;\r\n          a33 = a32 * -sin + a33 * cos;\r\n          a43 = a42 * -sin + a43 * cos;\r\n          a12 = t1;\r\n          a22 = t2;\r\n          a32 = t3;\r\n        }\r\n\r\n        angle = _atan2(-c, a33);\r\n        rotationY = angle * _RAD2DEG;\r\n\r\n        if (angle) {\r\n          cos = Math.cos(-angle);\r\n          sin = Math.sin(-angle);\r\n          t1 = a * cos - a13 * sin;\r\n          t2 = b * cos - a23 * sin;\r\n          t3 = c * cos - a33 * sin;\r\n          a43 = d * sin + a43 * cos;\r\n          a = t1;\r\n          b = t2;\r\n          c = t3;\r\n        }\r\n\r\n        angle = _atan2(b, a);\r\n        rotation = angle * _RAD2DEG;\r\n\r\n        if (angle) {\r\n          cos = Math.cos(angle);\r\n          sin = Math.sin(angle);\r\n          t1 = a * cos + b * sin;\r\n          t2 = a12 * cos + a22 * sin;\r\n          b = b * cos - a * sin;\r\n          a22 = a22 * cos - a12 * sin;\r\n          a = t1;\r\n          a12 = t2;\r\n        }\r\n\r\n        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\r\n          rotationX = rotation = 0;\r\n          rotationY = 180 - rotationY;\r\n        }\r\n\r\n        scaleX = _round(Math.sqrt(a * a + b * b + c * c));\r\n        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));\r\n        angle = _atan2(a12, a22);\r\n        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\r\n        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\r\n      }\r\n\r\n      if (cache.svg) {\r\n        t1 = target.getAttribute("transform");\r\n        cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));\r\n        t1 && target.setAttribute("transform", t1);\r\n      }\r\n    }\r\n\r\n    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\r\n      if (invertedScaleX) {\r\n        scaleX *= -1;\r\n        skewX += rotation <= 0 ? 180 : -180;\r\n        rotation += rotation <= 0 ? 180 : -180;\r\n      } else {\r\n        scaleY *= -1;\r\n        skewX += skewX <= 0 ? 180 : -180;\r\n      }\r\n    }\r\n\r\n    cache.x = x - ((cache.xPercent = x && (cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\r\n    cache.y = y - ((cache.yPercent = y && (cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\r\n    cache.z = z + px;\r\n    cache.scaleX = _round(scaleX);\r\n    cache.scaleY = _round(scaleY);\r\n    cache.rotation = _round(rotation) + deg;\r\n    cache.rotationX = _round(rotationX) + deg;\r\n    cache.rotationY = _round(rotationY) + deg;\r\n    cache.skewX = skewX + deg;\r\n    cache.skewY = skewY + deg;\r\n    cache.transformPerspective = perspective + px;\r\n\r\n    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) {\r\n      style[_transformOriginProp] = _firstTwoOnly(origin);\r\n    }\r\n\r\n    cache.xOffset = cache.yOffset = 0;\r\n    cache.force3D = _config.force3D;\r\n    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\r\n    cache.uncache = 0;\r\n    return cache;\r\n  },\r\n      _firstTwoOnly = function _firstTwoOnly(value) {\r\n    return (value = value.split(" "))[0] + " " + value[1];\r\n  },\r\n      _addPxTranslate = function _addPxTranslate(target, start, value) {\r\n    var unit = getUnit(start);\r\n    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;\r\n  },\r\n      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\r\n    cache.z = "0px";\r\n    cache.rotationY = cache.rotationX = "0deg";\r\n    cache.force3D = 0;\r\n\r\n    _renderCSSTransforms(ratio, cache);\r\n  },\r\n      _zeroDeg = "0deg",\r\n      _zeroPx = "0px",\r\n      _endParenthesis = ") ",\r\n      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\r\n    var _ref = cache || this,\r\n        xPercent = _ref.xPercent,\r\n        yPercent = _ref.yPercent,\r\n        x = _ref.x,\r\n        y = _ref.y,\r\n        z = _ref.z,\r\n        rotation = _ref.rotation,\r\n        rotationY = _ref.rotationY,\r\n        rotationX = _ref.rotationX,\r\n        skewX = _ref.skewX,\r\n        skewY = _ref.skewY,\r\n        scaleX = _ref.scaleX,\r\n        scaleY = _ref.scaleY,\r\n        transformPerspective = _ref.transformPerspective,\r\n        force3D = _ref.force3D,\r\n        target = _ref.target,\r\n        zOrigin = _ref.zOrigin,\r\n        transforms = "",\r\n        use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true;\r\n\r\n    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\r\n      var angle = parseFloat(rotationY) * _DEG2RAD,\r\n          a13 = Math.sin(angle),\r\n          a33 = Math.cos(angle),\r\n          cos;\r\n\r\n      angle = parseFloat(rotationX) * _DEG2RAD;\r\n      cos = Math.cos(angle);\r\n      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\r\n      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\r\n      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\r\n    }\r\n\r\n    if (transformPerspective !== _zeroPx) {\r\n      transforms += "perspective(" + transformPerspective + _endParenthesis;\r\n    }\r\n\r\n    if (xPercent || yPercent) {\r\n      transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";\r\n    }\r\n\r\n    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\r\n      transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;\r\n    }\r\n\r\n    if (rotation !== _zeroDeg) {\r\n      transforms += "rotate(" + rotation + _endParenthesis;\r\n    }\r\n\r\n    if (rotationY !== _zeroDeg) {\r\n      transforms += "rotateY(" + rotationY + _endParenthesis;\r\n    }\r\n\r\n    if (rotationX !== _zeroDeg) {\r\n      transforms += "rotateX(" + rotationX + _endParenthesis;\r\n    }\r\n\r\n    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\r\n      transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;\r\n    }\r\n\r\n    if (scaleX !== 1 || scaleY !== 1) {\r\n      transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;\r\n    }\r\n\r\n    target.style[_transformProp] = transforms || "translate(0, 0)";\r\n  },\r\n      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\r\n    var _ref2 = cache || this,\r\n        xPercent = _ref2.xPercent,\r\n        yPercent = _ref2.yPercent,\r\n        x = _ref2.x,\r\n        y = _ref2.y,\r\n        rotation = _ref2.rotation,\r\n        skewX = _ref2.skewX,\r\n        skewY = _ref2.skewY,\r\n        scaleX = _ref2.scaleX,\r\n        scaleY = _ref2.scaleY,\r\n        target = _ref2.target,\r\n        xOrigin = _ref2.xOrigin,\r\n        yOrigin = _ref2.yOrigin,\r\n        xOffset = _ref2.xOffset,\r\n        yOffset = _ref2.yOffset,\r\n        forceCSS = _ref2.forceCSS,\r\n        tx = parseFloat(x),\r\n        ty = parseFloat(y),\r\n        a11,\r\n        a21,\r\n        a12,\r\n        a22,\r\n        temp;\r\n\r\n    rotation = parseFloat(rotation);\r\n    skewX = parseFloat(skewX);\r\n    skewY = parseFloat(skewY);\r\n\r\n    if (skewY) {\r\n      skewY = parseFloat(skewY);\r\n      skewX += skewY;\r\n      rotation += skewY;\r\n    }\r\n\r\n    if (rotation || skewX) {\r\n      rotation *= _DEG2RAD;\r\n      skewX *= _DEG2RAD;\r\n      a11 = Math.cos(rotation) * scaleX;\r\n      a21 = Math.sin(rotation) * scaleX;\r\n      a12 = Math.sin(rotation - skewX) * -scaleY;\r\n      a22 = Math.cos(rotation - skewX) * scaleY;\r\n\r\n      if (skewX) {\r\n        skewY *= _DEG2RAD;\r\n        temp = Math.tan(skewX - skewY);\r\n        temp = Math.sqrt(1 + temp * temp);\r\n        a12 *= temp;\r\n        a22 *= temp;\r\n\r\n        if (skewY) {\r\n          temp = Math.tan(skewY);\r\n          temp = Math.sqrt(1 + temp * temp);\r\n          a11 *= temp;\r\n          a21 *= temp;\r\n        }\r\n      }\r\n\r\n      a11 = _round(a11);\r\n      a21 = _round(a21);\r\n      a12 = _round(a12);\r\n      a22 = _round(a22);\r\n    } else {\r\n      a11 = scaleX;\r\n      a22 = scaleY;\r\n      a21 = a12 = 0;\r\n    }\r\n\r\n    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {\r\n      tx = _convertToUnit(target, "x", x, "px");\r\n      ty = _convertToUnit(target, "y", y, "px");\r\n    }\r\n\r\n    if (xOrigin || yOrigin || xOffset || yOffset) {\r\n      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\r\n      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\r\n    }\r\n\r\n    if (xPercent || yPercent) {\r\n      temp = target.getBBox();\r\n      tx = _round(tx + xPercent / 100 * temp.width);\r\n      ty = _round(ty + yPercent / 100 * temp.height);\r\n    }\r\n\r\n    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";\r\n    target.setAttribute("transform", temp);\r\n    forceCSS && (target.style[_transformProp] = temp);\r\n  },\r\n      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue, relative) {\r\n    var cap = 360,\r\n        isString = _isString(endValue),\r\n        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),\r\n        change = relative ? endNum * relative : endNum - startNum,\r\n        finalValue = startNum + change + "deg",\r\n        direction,\r\n        pt;\r\n\r\n    if (isString) {\r\n      direction = endValue.split("_")[1];\r\n\r\n      if (direction === "short") {\r\n        change %= cap;\r\n\r\n        if (change !== change % (cap / 2)) {\r\n          change += change < 0 ? cap : -cap;\r\n        }\r\n      }\r\n\r\n      if (direction === "cw" && change < 0) {\r\n        change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;\r\n      } else if (direction === "ccw" && change > 0) {\r\n        change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;\r\n      }\r\n    }\r\n\r\n    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\r\n    pt.e = finalValue;\r\n    pt.u = "deg";\r\n\r\n    plugin._props.push(property);\r\n\r\n    return pt;\r\n  },\r\n      _assign = function _assign(target, source) {\r\n    for (var p in source) {\r\n      target[p] = source[p];\r\n    }\r\n\r\n    return target;\r\n  },\r\n      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\r\n    var startCache = _assign({}, target._gsap),\r\n        exclude = "perspective,force3D,transformOrigin,svgOrigin",\r\n        style = target.style,\r\n        endCache,\r\n        p,\r\n        startValue,\r\n        endValue,\r\n        startNum,\r\n        endNum,\r\n        startUnit,\r\n        endUnit;\r\n\r\n    if (startCache.svg) {\r\n      startValue = target.getAttribute("transform");\r\n      target.setAttribute("transform", "");\r\n      style[_transformProp] = transforms;\r\n      endCache = _parseTransform(target, 1);\r\n\r\n      _removeProperty(target, _transformProp);\r\n\r\n      target.setAttribute("transform", startValue);\r\n    } else {\r\n      startValue = getComputedStyle(target)[_transformProp];\r\n      style[_transformProp] = transforms;\r\n      endCache = _parseTransform(target, 1);\r\n      style[_transformProp] = startValue;\r\n    }\r\n\r\n    for (p in _transformProps) {\r\n      startValue = startCache[p];\r\n      endValue = endCache[p];\r\n\r\n      if (startValue !== endValue && exclude.indexOf(p) < 0) {\r\n        startUnit = getUnit(startValue);\r\n        endUnit = getUnit(endValue);\r\n        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\r\n        endNum = parseFloat(endValue);\r\n        plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);\r\n        plugin._pt.u = endUnit || 0;\r\n\r\n        plugin._props.push(p);\r\n      }\r\n    }\r\n\r\n    _assign(endCache, startCache);\r\n  };\r\n\r\n  _forEachName("padding,margin,Width,Radius", function (name, index) {\r\n    var t = "Top",\r\n        r = "Right",\r\n        b = "Bottom",\r\n        l = "Left",\r\n        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {\r\n      return index < 2 ? name + side : "border" + side + name;\r\n    });\r\n\r\n    _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {\r\n      var a, vars;\r\n\r\n      if (arguments.length < 4) {\r\n        a = props.map(function (prop) {\r\n          return _get(plugin, prop, property);\r\n        });\r\n        vars = a.join(" ");\r\n        return vars.split(a[0]).length === 5 ? a[0] : vars;\r\n      }\r\n\r\n      a = (endValue + "").split(" ");\r\n      vars = {};\r\n      props.forEach(function (prop, i) {\r\n        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\r\n      });\r\n      plugin.init(target, vars, tween);\r\n    };\r\n  });\r\n\r\n  var CSSPlugin = {\r\n    name: "css",\r\n    register: _initCore,\r\n    targetTest: function targetTest(target) {\r\n      return target.style && target.nodeType;\r\n    },\r\n    init: function init(target, vars, tween, index, targets) {\r\n      var props = this._props,\r\n          style = target.style,\r\n          startAt = tween.vars.startAt,\r\n          startValue,\r\n          endValue,\r\n          endNum,\r\n          startNum,\r\n          type,\r\n          specialProp,\r\n          p,\r\n          startUnit,\r\n          endUnit,\r\n          relative,\r\n          isTransformRelated,\r\n          transformPropTween,\r\n          cache,\r\n          smooth,\r\n          hasPriority;\r\n      _pluginInitted || _initCore();\r\n\r\n      for (p in vars) {\r\n        if (p === "autoRound") {\r\n          continue;\r\n        }\r\n\r\n        endValue = vars[p];\r\n\r\n        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {\r\n          continue;\r\n        }\r\n\r\n        type = typeof endValue;\r\n        specialProp = _specialProps[p];\r\n\r\n        if (type === "function") {\r\n          endValue = endValue.call(tween, index, target, targets);\r\n          type = typeof endValue;\r\n        }\r\n\r\n        if (type === "string" && ~endValue.indexOf("random(")) {\r\n          endValue = _replaceRandom(endValue);\r\n        }\r\n\r\n        if (specialProp) {\r\n          specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\r\n        } else if (p.substr(0, 2) === "--") {\r\n          startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();\r\n          endValue += "";\r\n          _colorExp.lastIndex = 0;\r\n\r\n          if (!_colorExp.test(startValue)) {\r\n            startUnit = getUnit(startValue);\r\n            endUnit = getUnit(endValue);\r\n          }\r\n\r\n          endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\r\n          this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);\r\n          props.push(p);\r\n        } else if (type !== "undefined") {\r\n          if (startAt && p in startAt) {\r\n            startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];\r\n            p in _config.units && !getUnit(startValue) && (startValue += _config.units[p]);\r\n            _isString(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));\r\n            (startValue + "").charAt(1) === "=" && (startValue = _get(target, p));\r\n          } else {\r\n            startValue = _get(target, p);\r\n          }\r\n\r\n          startNum = parseFloat(startValue);\r\n          relative = type === "string" && endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;\r\n          relative && (endValue = endValue.substr(2));\r\n          endNum = parseFloat(endValue);\r\n\r\n          if (p in _propertyAliases) {\r\n            if (p === "autoAlpha") {\r\n              if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {\r\n                startNum = 0;\r\n              }\r\n\r\n              _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);\r\n            }\r\n\r\n            if (p !== "scale" && p !== "transform") {\r\n              p = _propertyAliases[p];\r\n              ~p.indexOf(",") && (p = p.split(",")[0]);\r\n            }\r\n          }\r\n\r\n          isTransformRelated = p in _transformProps;\r\n\r\n          if (isTransformRelated) {\r\n            if (!transformPropTween) {\r\n              cache = target._gsap;\r\n              cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform);\r\n              smooth = vars.smoothOrigin !== false && cache.smooth;\r\n              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1);\r\n              transformPropTween.dep = 1;\r\n            }\r\n\r\n            if (p === "scale") {\r\n              this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? relative * endNum : endNum - cache.scaleY) || 0);\r\n              props.push("scaleY", p);\r\n              p += "X";\r\n            } else if (p === "transformOrigin") {\r\n              endValue = _convertKeywordsToPercentages(endValue);\r\n\r\n              if (cache.svg) {\r\n                _applySVGOrigin(target, endValue, 0, smooth, 0, this);\r\n              } else {\r\n                endUnit = parseFloat(endValue.split(" ")[2]) || 0;\r\n                endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);\r\n\r\n                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\r\n              }\r\n\r\n              continue;\r\n            } else if (p === "svgOrigin") {\r\n              _applySVGOrigin(target, endValue, 1, smooth, 0, this);\r\n\r\n              continue;\r\n            } else if (p in _rotationalProperties) {\r\n              _addRotationalPropTween(this, cache, p, startNum, endValue, relative);\r\n\r\n              continue;\r\n            } else if (p === "smoothOrigin") {\r\n              _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);\r\n\r\n              continue;\r\n            } else if (p === "force3D") {\r\n              cache[p] = endValue;\r\n              continue;\r\n            } else if (p === "transform") {\r\n              _addRawTransformPTs(this, endValue, target);\r\n\r\n              continue;\r\n            }\r\n          } else if (!(p in style)) {\r\n            p = _checkPropPrefix(p) || p;\r\n          }\r\n\r\n          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\r\n            startUnit = (startValue + "").substr((startNum + "").length);\r\n            endNum || (endNum = 0);\r\n            endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);\r\n            startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\r\n            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, relative ? relative * endNum : endNum - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\r\n            this._pt.u = endUnit || 0;\r\n\r\n            if (startUnit !== endUnit && endUnit !== "%") {\r\n              this._pt.b = startValue;\r\n              this._pt.r = _renderCSSPropWithBeginning;\r\n            }\r\n          } else if (!(p in style)) {\r\n            if (p in target) {\r\n              this.add(target, p, startValue || target[p], endValue, index, targets);\r\n            } else {\r\n              _missingPlugin(p, endValue);\r\n\r\n              continue;\r\n            }\r\n          } else {\r\n            _tweenComplexCSSString.call(this, target, p, startValue, endValue);\r\n          }\r\n\r\n          props.push(p);\r\n        }\r\n      }\r\n\r\n      hasPriority && _sortPropTweensByPriority(this);\r\n    },\r\n    get: _get,\r\n    aliases: _propertyAliases,\r\n    getSetter: function getSetter(target, property, plugin) {\r\n      var p = _propertyAliases[property];\r\n      p && p.indexOf(",") < 0 && (property = p);\r\n      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);\r\n    },\r\n    core: {\r\n      _removeProperty: _removeProperty,\r\n      _getMatrix: _getMatrix\r\n    }\r\n  };\r\n  gsap.utils.checkPrefix = _checkPropPrefix;\r\n\r\n  (function (positionAndScale, rotation, others, aliases) {\r\n    var all = _forEachName(positionAndScale + "," + rotation + "," + others, function (name) {\r\n      _transformProps[name] = 1;\r\n    });\r\n\r\n    _forEachName(rotation, function (name) {\r\n      _config.units[name] = "deg";\r\n      _rotationalProperties[name] = 1;\r\n    });\r\n\r\n    _propertyAliases[all[13]] = positionAndScale + "," + rotation;\r\n\r\n    _forEachName(aliases, function (name) {\r\n      var split = name.split(":");\r\n      _propertyAliases[split[1]] = all[split[0]];\r\n    });\r\n  })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");\r\n\r\n  _forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {\r\n    _config.units[name] = "px";\r\n  });\r\n\r\n  gsap.registerPlugin(CSSPlugin);\r\n\r\n  var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,\r\n      TweenMaxWithCSS = gsapWithCSS.core.Tween;\r\n\r\n  exports.Back = Back;\r\n  exports.Bounce = Bounce;\r\n  exports.CSSPlugin = CSSPlugin;\r\n  exports.Circ = Circ;\r\n  exports.Cubic = Cubic;\r\n  exports.Elastic = Elastic;\r\n  exports.Expo = Expo;\r\n  exports.Linear = Linear;\r\n  exports.Power0 = Power0;\r\n  exports.Power1 = Power1;\r\n  exports.Power2 = Power2;\r\n  exports.Power3 = Power3;\r\n  exports.Power4 = Power4;\r\n  exports.Quad = Quad;\r\n  exports.Quart = Quart;\r\n  exports.Quint = Quint;\r\n  exports.Sine = Sine;\r\n  exports.SteppedEase = SteppedEase;\r\n  exports.Strong = Strong;\r\n  exports.TimelineLite = Timeline;\r\n  exports.TimelineMax = Timeline;\r\n  exports.TweenLite = Tween;\r\n  exports.TweenMax = TweenMaxWithCSS;\r\n  exports.default = gsapWithCSS;\r\n  exports.gsap = gsapWithCSS;\r\n\r\n  if (typeof(window) === \'undefined\' || window !== exports) {Object.defineProperty(exports, \'__esModule\', { value: true });} else {delete window.default;}\r\n\r\n})));\r\n\n\n//# sourceURL=webpack://tryingwebpack/./node_modules/gsap/dist/gsap.js?')},"./src/index.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{eval('const algorithms = __webpack_require__(/*! ./scripts/algorithms.js */ "./src/scripts/algorithms.js");\r\nconst control = __webpack_require__(/*! ./scripts/control.js */ "./src/scripts/control.js");\r\nconst {\r\n  lightRecursiveDivision,\r\n} = __webpack_require__(/*! ./scripts/lightRecursiveDivision.js */ "./src/scripts/lightRecursiveDivision.js");\r\nconst {aStar} = __webpack_require__(/*! ./scripts/astar */ "./src/scripts/astar.js");\r\n\r\n// GLOBAL VARS\r\nlet blockedNodes = [];\r\nlet startNode = "c5r8";\r\nlet endNode = "c30r8";\r\nconst ROWS = 31;\r\nconst COLUMNS = 49;\r\nlet choosedAlgorithm = "dijsktra";\r\n// GLOBAL VARS\r\n\r\n// MAKING GRID FIRST\r\ncontrol.makeGrid(ROWS, COLUMNS);\r\n// END OF MAKING GRID\r\n\r\n// SET INITIAL START AND END FUNCTION\r\nfunction setInitialValues() {\r\n  let setInitialStart = document.getElementById(startNode);\r\n  let setInitialEnd = document.getElementById(endNode);\r\n  setInitialStart.classList.toggle("start");\r\n  setInitialEnd.classList.toggle("end");\r\n  blockedNodes = [];\r\n}\r\nsetInitialValues();\r\n// END OF SET INITAL FUNCTION\r\n\r\n// button state\r\nlet buttonState = "blocked";\r\n\r\nfunction stateStart() {\r\n  buttonState = "start";\r\n}\r\n\r\nfunction stateEnd() {\r\n  buttonState = "end";\r\n}\r\n\r\nfunction stateBlock() {\r\n  buttonState = "blocked";\r\n}\r\n// button state //\r\n\r\n// CHANGING STATE FUNCTION\r\nfunction changeState(clickedId) {\r\n  // if it is blocked click\r\n  if (buttonState == "blocked") {\r\n    // if its not start or end\r\n    let cell = document.getElementById(clickedId);\r\n    if (!cell.classList.contains("start") && !cell.classList.contains("end")) {\r\n      // if blocked incluides ID\r\n      if (blockedNodes.includes(clickedId)) {\r\n        blockedNodes = blockedNodes.filter((node) => node != clickedId);\r\n      } else {\r\n        // if not, add blocked node\r\n        blockedNodes.push(clickedId);\r\n      }\r\n\r\n      // color and add class\r\n\r\n      cell.classList.toggle(buttonState);\r\n\r\n      return;\r\n    }\r\n  } else {\r\n    // removing class from td so that it can be only one start/end\r\n    let cells = document.getElementsByTagName("td");\r\n    for (let x of cells) {\r\n      x.classList.remove(buttonState);\r\n    }\r\n\r\n    // select cell\r\n    let cell = document.getElementById(clickedId);\r\n    cell.classList.toggle(buttonState);\r\n\r\n    // if start, change starting node ID\r\n    if (buttonState == "start") {\r\n      startNode = clickedId;\r\n    } else {\r\n      // if end, change ending node ID\r\n      endNode = clickedId;\r\n    }\r\n  }\r\n}\r\n// END OF CHANGING STATE FUNCTION\r\n\r\n// DYNAMIC PATHFINDING BOOL VAR\r\nlet dynamicPathfinding = false;\r\n\r\n// USAGE OF APP\r\n\r\nwindow.run = function () {\r\n  // erase visited and shortest path classes\r\n  let alreadyVisited = document.querySelectorAll("td");\r\n  for (let el of alreadyVisited) {\r\n    el.removeAttribute("style");\r\n  }\r\n\r\n  if (choosedAlgorithm == "bfs") {\r\n    control.visualizeBfs(ROWS, COLUMNS, startNode, endNode, blockedNodes);\r\n  } else if (choosedAlgorithm == "astar") {\r\n    control.visualizeAstar(ROWS, COLUMNS, startNode, endNode, blockedNodes);\r\n  }\r\n\r\n  // set dynamic pathFinding to TRUE\r\n  dynamicPathfinding = true;\r\n};\r\n\r\n// CLEAR BOARD FUNCTION\r\nwindow.clearBoard = function () {\r\n  let allNodesToErase = document.querySelectorAll("td");\r\n  for (let el of allNodesToErase) {\r\n    el.removeAttribute("style");\r\n    el.removeAttribute("class");\r\n  }\r\n\r\n  setInitialValues();\r\n\r\n  // set dynamic pathFinding to FALSE\r\n  dynamicPathfinding = false;\r\n\r\n  // make new graph\r\n};\r\n\r\n// FUNCTION TO DRAW\r\nlet isMouseDown = false;\r\n\r\n// SET OF ALREADY VISITED WHEN MOUSE MOVING\r\nlet newBlockedSet = new Set();\r\n\r\n// NEW SET OF UNBLOCKED\r\nlet newUnblockedSet = new Set();\r\n\r\n// determine if first touch was on blocked or unlocked\r\nlet lock = true;\r\n\r\nlet clickedOnStart = false;\r\nlet clickedOnEnd = false;\r\n\r\nwindow.mouseDown = function (elementId) {\r\n  isMouseDown = true;\r\n\r\n  let currentlyClicked = document.getElementById(elementId);\r\n\r\n  // if currently clicked has class of \'blocked\'\r\n  if (currentlyClicked.classList.contains("blocked")) {\r\n    lock = false;\r\n  } else {\r\n    lock = true;\r\n  }\r\n\r\n  // if clicked on start or end\r\n  if (currentlyClicked.classList.contains("start")) {\r\n    clickedOnStart = true;\r\n  } else if (currentlyClicked.classList.contains("end")) {\r\n    clickedOnEnd = true;\r\n  }\r\n};\r\n\r\nwindow.mouseUp = function () {\r\n  isMouseDown = false;\r\n\r\n  // update blocked nodes\r\n\r\n  // adding\r\n  let newBlockedNodes = Array.from(newBlockedSet);\r\n  blockedNodes = blockedNodes.concat(newBlockedNodes);\r\n  newBlockedSet = new Set();\r\n\r\n  // deleting\r\n  let newUnblockedNodes = Array.from(newUnblockedSet);\r\n  blockedNodes = blockedNodes.filter(\r\n    (item) => !newUnblockedNodes.includes(item)\r\n  );\r\n  newUnblockedSet = new Set();\r\n\r\n  // !!!\r\n  clickedOnStart = false;\r\n  clickedOnEnd = false;\r\n};\r\n\r\nwindow.mouseMoved = function (elementId) {\r\n  if (isMouseDown) {\r\n    // get id of currently clicked element\r\n    let currentlyTouched = document.getElementById(elementId);\r\n\r\n    // if clicked on blocked or unblocked\r\n    if (!clickedOnStart && !clickedOnEnd) {\r\n      // if state == blocked\r\n      if (buttonState == "blocked") {\r\n        // if its not start or end element\r\n        if (\r\n          !currentlyTouched.classList.contains("start") &&\r\n          !currentlyTouched.classList.contains("end")\r\n        ) {\r\n          if (lock) {\r\n            currentlyTouched.classList.add("blocked");\r\n            newBlockedSet.add(elementId);\r\n          } else {\r\n            currentlyTouched.classList.remove("blocked");\r\n            newUnblockedSet.add(elementId);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // if clicked on start\r\n    else if (clickedOnStart && !clickedOnEnd) {\r\n      // if start id is different than currently clicked\r\n      if (startNode != elementId) {\r\n        // remove start class from all elements\r\n        let cells = document.getElementsByTagName("td");\r\n        for (let x of cells) {\r\n          x.classList.remove("start");\r\n        }\r\n        // add class start to currently touched\r\n        currentlyTouched.classList.add("start");\r\n        // make currently touched new start node\r\n        startNode = elementId;\r\n      }\r\n\r\n      // if dynamicPathfinding true, animate instantly\r\n      if (dynamicPathfinding == true) {\r\n        control.dynamicAnimate(ROWS, COLUMNS, startNode, endNode, blockedNodes);\r\n      }\r\n    }\r\n    // if clicked on end\r\n    else if (clickedOnEnd && !clickedOnStart) {\r\n      // if start id is different than currently clicked\r\n      if (endNode != elementId) {\r\n        let cells = document.getElementsByTagName("td");\r\n        for (let x of cells) {\r\n          x.classList.remove("end");\r\n        }\r\n\r\n        // add class end to currently touched\r\n        currentlyTouched.classList.add("end");\r\n        // make currently touched new end node\r\n        endNode = elementId;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// RECURSIVE DIVISION\r\nwindow.RDM = function () {\r\n  let counter = 0;\r\n  let xd = lightRecursiveDivision(COLUMNS, ROWS);\r\n  for (let el of xd) {\r\n    setTimeout(() => {\r\n      if (el != startNode && el != endNode) {\r\n        document.getElementById(el).classList.add("blocked");\r\n        blockedNodes.push(el);\r\n      }\r\n    }, 10 * counter);\r\n    counter++;\r\n  }\r\n};\r\n\r\n// change algorithm func\r\nwindow.changeAlgorithm = function (element) {\r\n  choosedAlgorithm = element.value;\r\n\r\n  let algoCard = document.querySelector(".current-algorithm");\r\n\r\n  if (element.value == "astar") {\r\n    algoCard.id = "astar";\r\n    algoCard.innerHTML = `<div class=\'title-and-change\'>\r\n    <h2 class="heading">A* Algorithm</h2>\r\n    <a href="#modal" role="button" class="button button__link">Change</a>\r\n  </div>\r\n  <p>(pronounced \'A Star\') is considered the fastest pathfinding algorithm and is commonly used in video games. It is a variation on Dijkstra by using a heuristic to direct it\'s search towards the target. The heuristic should be an estimate of the distance from any node to the target. On this board we use the manhattan distance to direct the A* search.</p>`;\r\n  } else if (element.value == "bfs") {\r\n    algoCard.id = "bfs";\r\n    algoCard.innerHTML = `<div class=\'title-and-change\'>\r\n    <h2 class="heading">BFS Algorithm</h2>\r\n    <a href="#modal" role="button" class="button button__link">Change</a>\r\n  </div>\r\n  <p>Breadth First Search is a very similar algorithm to it\'s brother, Depth, differencing only in how the unvisited nodes are prioritised. Where in DFS a branch is fully explored until the end, Breadth First will explore every nearest neighbor before going deeper into any branch. This makes it more suitable for pathfinding.</p>`;\r\n  } else if (element.value == "dijkstra") {\r\n    algoCard.id = "dijkstra";\r\n    algoCard.innerHTML = `<div class=\'title-and-change\'>\r\n    <h2 class="heading">Dijkstra Algorithm</h2>\r\n    <a href="#modal" role="button" class="button button__link">Change</a>\r\n  </div>\r\n  <p>Dijkstra is the father of pathfinding algorithms. It was conceived by computer scientist Edsger W. Dijkstra published in 1956 and is one of the most famous pathfinding algorithms for weighted graphs, and is used in road networks, IP routing, geolocation, telephone networks and more.</p>`;\r\n  }\r\n};\r\n\n\n//# sourceURL=webpack://tryingwebpack/./src/index.js?')},"./src/scripts/algorithms.js":module=>{eval("// bfs algorithm\r\nfunction bfs(graph, start, end) {\r\n  // object containing visited and path to return\r\n  let visitedAndPath = {\r\n    visited: [],\r\n    path: [],\r\n  };\r\n\r\n  // set of already visited nodes\r\n  let visited = new Set();\r\n\r\n  // queue of nodes to check\r\n  let queue = [];\r\n\r\n  // track which node called which\r\n  let tracking = {};\r\n\r\n  // add start node to queue\r\n  queue.push(start);\r\n\r\n  // counter to set timeout\r\n  let counter = 1;\r\n\r\n  // while there are nodes in queue\r\n  while (queue.length > 0) {\r\n    // current node\r\n    let curr = queue.shift();\r\n    // current node destinatiuons\r\n    let dests = graph[curr];\r\n\r\n    // add to visited obj\r\n    visitedAndPath.visited.push(curr);\r\n\r\n    // add visited\r\n    visited.add(curr);\r\n\r\n    // if end is reached\r\n    if (curr == end) {\r\n      console.log(\"found!\");\r\n      let path = [];\r\n      let trackedNode = end;\r\n\r\n      while (trackedNode != null) {\r\n        path.unshift(trackedNode);\r\n        trackedNode = tracking[trackedNode];\r\n      }\r\n\r\n      visitedAndPath.path = path;\r\n\r\n      return visitedAndPath;\r\n    }\r\n\r\n    // if not\r\n    else {\r\n      for (let node of dests) {\r\n        if (!visited.has(node)) {\r\n          tracking[node] = curr;\r\n          queue.push(node);\r\n\r\n          // add to visited to not check twice the node\r\n          visited.add(node);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// A * algorithm\r\nfunction aStar(graph, start, end) {\r\n  // end node coordinates\r\n  let endRowPosition = end.split(\"r\");\r\n  let endColPosition = endRowPosition[0].split(\"c\");\r\n  endRowPosition.shift();\r\n  endColPosition.shift();\r\n  endRowPosition = Number(endRowPosition);\r\n  endColPosition = Number(endColPosition);\r\n\r\n  // starting node coordinates\r\n  let startRowPosition = start.split(\"r\");\r\n  let startColPosition = startRowPosition[0].split(\"c\");\r\n  startRowPosition.shift();\r\n  startColPosition.shift();\r\n  startRowPosition = Number(startRowPosition);\r\n  startColPosition = Number(startColPosition);\r\n\r\n  // starting node direction\r\n  let startingNodeDirection;\r\n  if (startRowPosition < endRowPosition) {\r\n    startingNodeDirection = 'down';\r\n  } else  if (startRowPosition > endRowPosition) {\r\n    startingNodeDirection = 'up';\r\n  } else if (startColPosition > endColPosition) {\r\n    startingNodeDirection = 'left';\r\n  } else if (startColPosition < endColPosition) {\r\n    startingNodeDirection = 'right';\r\n  }\r\n\r\n  // object containing visited and path to return\r\n  let visitedAndPath = {\r\n    visited: [],\r\n    path: [],\r\n  };\r\n\r\n  // set of already visited nodes\r\n  let visited = new Set();\r\n\r\n  // queue of nodes to check\r\n  let queue = [];\r\n\r\n  // track which node called which\r\n  let tracking = {};\r\n\r\n  // add start node object to queue\r\n  let first = {\r\n    name: start,\r\n  };\r\n  queue.push(first);\r\n\r\n  // set starting node F to 0\r\n  queue[0].heuristic = Math.abs(startRowPosition - endRowPosition) + Math.abs(startColPosition - endColPosition);\r\n  queue[0].distance = 1;\r\n  queue[0].f = queue[0].heuristic + queue[0].distance;\r\n  queue[0].nodeDirection = startingNodeDirection;\r\n  console.log(queue);\r\n\r\n  let previousDirection = '';\r\n\r\n  \r\n  // while there are nodes in queue\r\n  while (queue.length > 0) {\r\n    // find the node with least F\r\n    let curr = {\r\n      f: Infinity,\r\n      distance: 0,\r\n      heuristic: Infinity,\r\n      name: start,\r\n    };\r\n\r\n    // shortest path guaranteed but its going over one node first and it doesn't look cool\r\n    /* for (let el of queue) {\r\n      if (el.f <= curr.f) {\r\n        curr = el;\r\n      } else if (el.f == curr.f) {\r\n        if (el.heuristic < curr.heuristic) {\r\n          curr = el;\r\n        } else if (el.heuristic == curr.heuristic) {\r\n          if (el.nodeDirection == curr.nodeDirection) {\r\n            curr = el;\r\n          } \r\n        }\r\n      }\r\n    } */\r\n\r\n    /* for (let el of queue) {\r\n      if (el.f < curr.f) {\r\n        curr = el;\r\n      } else if (el.f == curr.f) {\r\n        if (el.heuristic < curr.heuristic) {\r\n          curr = el;\r\n        } else if (el.heuristic == curr.heuristic) {\r\n          if (el.distance <= curr.distance) {\r\n            curr = el;\r\n          } \r\n        }\r\n      }\r\n    } */\r\n\r\n    for (let el of queue) {\r\n      if (el.f <= curr.f) {\r\n        curr = el;\r\n      } \r\n    }\r\n\r\n    for (let el of queue) {\r\n      if (el.f == curr.f) {\r\n        if (el.heuristic <= curr.heuristic) {\r\n          curr = el;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let el of queue) {\r\n      if (el.heuristic == curr.heuristic) {\r\n        if (el.distance <= curr.distance) {\r\n          curr = el;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let el of queue) {\r\n      if (el.distance == curr.distance) {\r\n        if (el.nodeDirection == previousDirection) {\r\n          curr = el;\r\n        }\r\n      }\r\n    }\r\n\r\n    \r\n\r\n    console.log(curr);\r\n\r\n    // remove curr from queue\r\n    queue = queue.filter((el) => el.name != curr.name);\r\n\r\n    // current node successors\r\n    let dests = graph[curr.name];\r\n    let destsProps = Object.keys(dests);\r\n    //console.log('OBECNY OBIEKT: ' + curr.name + ' A JEGO SĄSIEDZI TO: ' + destsProps);\r\n\r\n    // loop to set fs of nodes\r\n    let newNodes = [];\r\n    for (let el of destsProps) {\r\n      // determine heuristics of that node\r\n      let rowPosition = el.split(\"r\");\r\n      let colPosition = rowPosition[0].split(\"c\");\r\n      rowPosition.shift();\r\n      colPosition.shift();\r\n      rowPosition = Number(rowPosition);\r\n      colPosition = Number(colPosition);\r\n\r\n      // get current node position\r\n      let currentRow = curr.name.split(\"r\");\r\n      let currentCol = currentRow[0].split(\"c\");\r\n      currentRow.shift();\r\n      currentCol.shift();\r\n      currentRow = Number(currentRow);\r\n      currentCol = Number(currentCol);\r\n\r\n      // set heuristic for that node\r\n      let newNodeHeuristic =\r\n        Math.abs(rowPosition - endRowPosition) +\r\n        Math.abs(colPosition - endColPosition);\r\n\r\n      // determine distance of that node\r\n      let newNodeDistance = curr.distance + 1;\r\n\r\n      // determine F\r\n      let f = newNodeHeuristic + newNodeDistance;\r\n\r\n      // determine direction\r\n      let direction = '';\r\n      if (rowPosition > currentRow && colPosition == currentCol) {\r\n        direction = 'down';\r\n      } else if (rowPosition < currentRow && colPosition == currentCol) {\r\n        direction = 'up';\r\n      } else if (colPosition < currentCol && rowPosition == currentRow) {\r\n        direction = 'left';\r\n      } else if (colPosition > currentCol && rowPosition == currentRow) {\r\n        direction = 'right';\r\n      }\r\n\r\n      let newNode = {\r\n        f: f,\r\n        distance: newNodeDistance,\r\n        heuristic: newNodeHeuristic,\r\n        name: el,\r\n        nodeDirection: direction\r\n      };\r\n\r\n      newNodes.push(newNode);\r\n      \r\n      /* document.getElementById(newNode.name).innerHTML = `${newNode.f}`; */\r\n    }\r\n\r\n    // add to visited obj\r\n    visitedAndPath.visited.push(curr.name);\r\n\r\n    // add visited\r\n    visited.add(curr.name);\r\n    \r\n\r\n    // if end is reached\r\n    if (curr.name == end) {\r\n      console.log(\"found!\");\r\n      let path = [];\r\n      let trackedNode = end;\r\n\r\n      while (trackedNode != null) {\r\n        path.unshift(trackedNode);\r\n        trackedNode = tracking[trackedNode];\r\n      }\r\n\r\n      visitedAndPath.path = path;\r\n\r\n      return visitedAndPath;\r\n    }\r\n\r\n    // if not\r\n    else {\r\n      for (let node of newNodes) {\r\n        //console.log(node);\r\n        if (!visited.has(node.name)) {\r\n          // add to tracking\r\n          tracking[node.name] = curr.name;\r\n\r\n          // add node to queue\r\n          queue.push(node);\r\n\r\n          // add to visited to not check twice the node\r\n          visited.add(node.name);\r\n\r\n          // set previous direction to current node direction\r\n          previousDirection = curr.nodeDirection;\r\n        }\r\n      }\r\n      //console.log(visited);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  bfs,\r\n  aStar,\r\n};\r\n\n\n//# sourceURL=webpack://tryingwebpack/./src/scripts/algorithms.js?")},"./src/scripts/astar.js":module=>{eval('function aStar(graph, start, end) {\r\n    // end node coordinates\r\n  let endRowPosition = end.split("r");\r\n  let endColPosition = endRowPosition[0].split("c");\r\n  endRowPosition.shift();\r\n  endColPosition.shift();\r\n  endRowPosition = Number(endRowPosition);\r\n  endColPosition = Number(endColPosition);\r\n\r\n  // starting node coordinates\r\n  let startRowPosition = start.split("r");\r\n  let startColPosition = startRowPosition[0].split("c");\r\n  startRowPosition.shift();\r\n  startColPosition.shift();\r\n  startRowPosition = Number(startRowPosition);\r\n  startColPosition = Number(startColPosition);\r\n}\r\n\r\nmodule.exports = {aStar};\n\n//# sourceURL=webpack://tryingwebpack/./src/scripts/astar.js?')},"./src/scripts/control.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const { gsap } = __webpack_require__(/*! gsap/dist/gsap */ "./node_modules/gsap/dist/gsap.js");\r\nconst algorithms = __webpack_require__(/*! ./algorithms.js */ "./src/scripts/algorithms.js");\r\nconst { aStar } = __webpack_require__(/*! ./astar.js */ "./src/scripts/astar.js");\r\n\r\n// graph filtering function\r\nfunction filterGraph(graph, blocked) {\r\n  for (let el in graph) {\r\n    graph[el] = graph[el].filter((item) => !blocked.includes(item));\r\n\r\n    if (blocked.includes[el]) {\r\n      delete graph[el];\r\n    }\r\n  }\r\n}\r\n\r\n// instant animate for dynamic pathfinding\r\nfunction instantAnimate(visited, path) {\r\n  for (let el of visited) {\r\n    document.getElementById(el).classList.toggle("visited");\r\n    gsap.to(document.getElementById(el), {\r\n      backgroundColor: "#BCE7FD",\r\n    });\r\n  }\r\n\r\n  console.log(path);\r\n  for (let el of path) {\r\n    document.getElementById(el).classList.add("shortest-path-node");\r\n\r\n    gsap.to(document.getElementById(el), {\r\n      backgroundColor: "#FFE20A",\r\n      borderColor: "#FFE20A",\r\n    });\r\n  }\r\n}\r\n\r\n// animate graph function\r\nfunction animateGraph(visited, path) {\r\n  let delay = 1;\r\n\r\n  let vlen = visited.length;\r\n  // make a promise\r\n  for (let i = 0; i < vlen; i++) {\r\n    setTimeout(function () {\r\n      document.getElementById(visited[i]).classList.toggle("visited");\r\n\r\n      //gsap\r\n      gsap\r\n        .timeline()\r\n        .fromTo(\r\n          document.getElementById(visited[i]),\r\n          {\r\n            scale: 0.3,\r\n            borderRadius: "100%",\r\n            backgroundColor: "#B0DB43",\r\n          },\r\n          {\r\n            scale: 1.1,\r\n            borderRadius: "25%",\r\n            backgroundColor: "#12EAEA",\r\n          }\r\n        )\r\n        .to(document.getElementById(visited[i]), {\r\n          scale: 1,\r\n          borderRadius: "0%",\r\n          backgroundColor: "#BCE7FD",\r\n        });\r\n\r\n      // animejs\r\n      /*  anime({\r\n        targets: document.getElementById(visited[i]),\r\n        scale: [0.3, 1.2, 1],\r\n        borderRadius: ["100%", "50%", "25%", "0%"],\r\n        backgroundColor: ["#DB2763", "#B0DB43", "#12EAEA", "#BCE7FD"],\r\n        easing: "linear",\r\n        duration: 1500,\r\n      }); */\r\n    }, 25 * delay);\r\n\r\n    delay++;\r\n  }\r\n\r\n  let pathLen = path.length;\r\n\r\n  // if promise resolved\r\n  delay += 20;\r\n  for (let i = 0; i < pathLen; i++) {\r\n    setTimeout(function () {\r\n      let currentVisited = document.getElementById(path[i]);\r\n      currentVisited.classList.toggle("visited");\r\n      currentVisited.classList.toggle("shortest-path-node");\r\n\r\n      gsap\r\n        .timeline()\r\n        .to(document.getElementById(path[i]), {\r\n          scale: 1.1,\r\n          backgroundColor: "#D86E8A",\r\n          borderColor: "#D86E8A",\r\n        })\r\n        .to(document.getElementById(path[i]), {\r\n          scale: 1,\r\n          backgroundColor: "#FFE20A",\r\n          borderColor: "#FFE20A",\r\n        });\r\n\r\n      // animejs\r\n      /* anime({\r\n        targets: document.getElementById(path[i]),\r\n        scale: [1.2, 1],\r\n        backgroundColor: [\'#D86E8A\', \'#FFE20A\'],\r\n        borderColor: [\'#D86E8A\', \'#FFE20A\'],\r\n        duration: 1500\r\n      }) */\r\n    }, 25 * delay);\r\n\r\n    delay += 2;\r\n  }\r\n}\r\n\r\n// make a grid function\r\nfunction makeGrid(rows, cols) {\r\n  for (let x = 0; x < rows; x++) {\r\n    // adding row to table\r\n    let tabela = document.querySelector(".tabela");\r\n    tabela.innerHTML += `<tr id=\'r${x}\'></tr>`;\r\n    for (let j = 0; j < cols; j++) {\r\n      // adding td to row\r\n      let trow = document.getElementById(`r${x}`);\r\n      trow.innerHTML += `<td id=\'c${j}r${x}\'  draggable=\'false\' ondragstart="return false;" ondrop="return false;" onclick=\'changeState(this.id)\' onmousedown=\'mouseDown(this.id)\' onmouseup=\'mouseUp()\' onmousemove=\'mouseMoved(this.id)\' ></td>`;\r\n    }\r\n  }\r\n}\r\n\r\n// SET INITIAL VALUES FUNCTION\r\nfunction setInitialValues() {\r\n  let setInitialStart = document.getElementById(startNode);\r\n  let setInitialEnd = document.getElementById(endNode);\r\n  setInitialStart.classList.toggle("start");\r\n  setInitialEnd.classList.toggle("end");\r\n  blockedNodes = [];\r\n}\r\n\r\n// make a graph function\r\nfunction makeGraph(rows, cols) {\r\n  let graph = Object.create(null);\r\n\r\n  // for every row\r\n  for (let i = 0; i < rows; i++) {\r\n    // for every col\r\n    for (let j = 0; j < cols; j++) {\r\n      // if it is first row\r\n      if (i == 0) {\r\n        // if it is first col\r\n        if (j == 0) {\r\n          graph[`c${j}r${i}`] = [`c${j + 1}r${i}`, `c${j}r${i + 1}`];\r\n        }\r\n        // if it is last col\r\n        else if (j == cols - 1) {\r\n          graph[`c${j}r${i}`] = [`c${j - 1}r${i}`, `c${j}r${i + 1}`];\r\n        }\r\n        // if row == 0 and col != 0 and col != 75\r\n        else {\r\n          graph[`c${j}r${i}`] = [\r\n            `c${j - 1}r${i}`,\r\n            `c${j + 1}r${i}`,\r\n            `c${j}r${i + 1}`,\r\n          ];\r\n        }\r\n      }\r\n\r\n      // if last row\r\n      else if (i == rows - 1) {\r\n        // if first col\r\n        if (j == 0) {\r\n          graph[`c${j}r${i}`] = [`c${j + 1}r${i}`, `c${j}r${i - 1}`];\r\n        }\r\n        // if last col\r\n        else if (j == cols - 1) {\r\n          graph[`c${j}r${i}`] = [`c${j - 1}r${i}`, `c${j}r${i - 1}`];\r\n        }\r\n\r\n        // if middle col\r\n        else {\r\n          graph[`c${j}r${i}`] = [\r\n            `c${j - 1}r${i}`,\r\n            `c${j + 1}r${i}`,\r\n            `c${j}r${i - 1}`,\r\n          ];\r\n        }\r\n      }\r\n\r\n      // if middle row\r\n      else {\r\n        // if first col\r\n        if (j == 0) {\r\n          graph[`c${j}r${i}`] = [\r\n            `c${j + 1}r${i}`,\r\n            `c${j}r${i + 1}`,\r\n            `c${j}r${i - 1}`,\r\n          ];\r\n        }\r\n        // if last col\r\n        else if (j == cols - 1) {\r\n          graph[`c${j}r${i}`] = [\r\n            `c${j - 1}r${i}`,\r\n            `c${j}r${i + 1}`,\r\n            `c${j}r${i - 1}`,\r\n          ];\r\n        }\r\n        // if middle row and middle column\r\n        else {\r\n          graph[`c${j}r${i}`] = [\r\n            `c${j + 1}r${i}`,\r\n            `c${j - 1}r${i}`,\r\n            `c${j}r${i - 1}`,\r\n            `c${j}r${i + 1}`,\r\n          ];\r\n        }\r\n      }\r\n\r\n      //end of j loop\r\n    }\r\n\r\n    // end of i loop\r\n  }\r\n\r\n  return graph;\r\n}\r\n\r\nfunction makeWeightedGraph(rows, cols) {\r\n  let graph = Object.create(null);\r\n\r\n  let propName1, propName2, propName3, propName4;\r\n\r\n  // for every row\r\n  for (let i = 0; i < rows; i++) {\r\n    // for every column\r\n    for (let j = 0; j < cols; j++) {\r\n      // if top left\r\n      if (i == 0 && j == 0) {\r\n        propName1 = `c${j + 1}r${i}`;\r\n        propName2 = `c${j}r${i + 1}`;\r\n        propName3 = `c${j + 1}r${i + 1}`;\r\n        graph[`c${j}r${i}`] = {\r\n          [propName1]: { weight: 1, heuristic: 0 },\r\n          [propName2]: { weight: 1, heuristic: 0 },\r\n          [propName3]: { weight: 1, heuristic: 0 },\r\n        };\r\n      }\r\n      // if top right\r\n      else if (i == 0 && j == cols - 1) {\r\n        propName1 = `c${j - 1}r${i}`;\r\n        propName2 = `c${j}r${i + 1}`;\r\n        propName3 = `c${j - 1}r${i + 1}`;\r\n        graph[`c${j}r${i}`] = {\r\n          [propName1]: { weight: 1, heuristic: 0 },\r\n          [propName2]: { weight: 1, heuristic: 0 },\r\n          [propName3]: { weight: 1, heuristic: 0 },\r\n        };\r\n      }\r\n      // if bottom left\r\n      else if (i == rows - 1 && j == 0) {\r\n        propName1 = `c${j}r${i - 1}`;\r\n        propName2 = `c${j + 1}r${i - 1}`;\r\n        propName3 = `c${j + 1}r${i}`;\r\n        graph[`c${j}r${i}`] = {\r\n          [propName1]: { weight: 1, heuristic: 0 },\r\n          [propName2]: { weight: 1, heuristic: 0 },\r\n          [propName3]: { weight: 1, heuristic: 0 },\r\n        };\r\n      }\r\n      // if bottom right\r\n      else if (i == rows - 1 && j == cols - 1) {\r\n        propName1 = `c${j}r${i - 1}`;\r\n        propName2 = `c${j - 1}r${i}`;\r\n        propName3 = `c${j - 1}r${i - 1}`;\r\n        graph[`c${j}r${i}`] = {\r\n          [propName1]: { weight: 1, heuristic: 0 },\r\n          [propName2]: { weight: 1, heuristic: 0 },\r\n          [propName3]: { weight: 1, heuristic: 0 },\r\n        };\r\n      }\r\n      // if top\r\n      else if (i == 0) {\r\n        propName1 = `c${j - 1}r${i}`;\r\n        propName2 = `c${j + 1}r${i}`;\r\n        propName3 = `c${j}r${i + 1}`;\r\n        graph[`c${j}r${i}`] = {\r\n          [propName1]: { weight: 1, heuristic: 0 },\r\n          [propName2]: { weight: 1, heuristic: 0 },\r\n          [propName3]: { weight: 1, heuristic: 0 },\r\n        };\r\n      }\r\n      // if bottom\r\n      else if (i == rows - 1) {\r\n        propName1 = `c${j}r${i - 1}`;\r\n        propName2 = `c${j + 1}r${i}`;\r\n        propName3 = `c${j - 1}r${i}`;\r\n        graph[`c${j}r${i}`] = {\r\n          [propName1]: { weight: 1, heuristic: 0 },\r\n          [propName2]: { weight: 1, heuristic: 0 },\r\n          [propName3]: { weight: 1, heuristic: 0 },\r\n        };\r\n      }\r\n      // if left\r\n      else if (j == 0) {\r\n        propName1 = `c${j}r${i - 1}`;\r\n        propName2 = `c${j}r${i + 1}`;\r\n        propName3 = `c${j + 1}r${i}`;\r\n        graph[`c${j}r${i}`] = {\r\n          [propName1]: { weight: 1, heuristic: 0 },\r\n          [propName2]: { weight: 1, heuristic: 0 },\r\n          [propName3]: { weight: 1, heuristic: 0 },\r\n        };\r\n      }\r\n      // if right\r\n      else if (j == cols - 1) {\r\n        propName1 = `c${j}r${i - 1}`;\r\n        propName2 = `c${j}r${i + 1}`;\r\n        propName3 = `c${j - 1}r${i}`;\r\n        graph[`c${j}r${i}`] = {\r\n          [propName1]: { weight: 1, heuristic: 0 },\r\n          [propName2]: { weight: 1, heuristic: 0 },\r\n          [propName3]: { weight: 1, heuristic: 0 },\r\n        };\r\n      }\r\n      // if middle\r\n      else {\r\n        propName1 = `c${j - 1}r${i}`;\r\n        propName2 = `c${j + 1}r${i}`;\r\n        propName3 = `c${j}r${i + 1}`;\r\n        propName4 = `c${j}r${i - 1}`;\r\n        graph[`c${j}r${i}`] = {\r\n          [propName1]: { weight: 1, heuristic: 0 },\r\n          [propName2]: { weight: 1, heuristic: 0 },\r\n          [propName3]: { weight: 1, heuristic: 0 },\r\n          [propName4]: { weight: 1, heuristic: 0 },\r\n        };\r\n      }\r\n    }\r\n  }\r\n  return graph;\r\n}\r\n\r\nfunction filterWeightedGraph(graph, blocked) {\r\n  for (let el in graph) {\r\n    // filter from properties\r\n    for (let le in graph[el]) {\r\n      if (blocked.includes(le)) {\r\n        delete graph[el][le];\r\n      }\r\n    }\r\n\r\n    // delete obj if it is blocked\r\n    if (blocked.includes(el)) {\r\n      delete graph[el];\r\n    }\r\n  }\r\n}\r\n\r\n// visualize aStar function\r\nfunction visualizeAstar(ROWS, COLUMNS, startNode, endNode, blockedNodes) {\r\n  // making graph\r\n  let graph = makeWeightedGraph(ROWS, COLUMNS);\r\n\r\n  // filtering graph\r\n  filterWeightedGraph(graph, blockedNodes);\r\n\r\n  // finding shortest path\r\n  let ecie = algorithms.aStar(graph, startNode, endNode);\r\n\r\n  console.log(ecie);\r\n\r\n  // if there\'s no shortest path\r\n  if (typeof ecie === "undefined") {\r\n    document.getElementById("no-path").removeAttribute("hidden");\r\n  }\r\n  // if everything went good\r\n  else {\r\n    document.getElementById("no-path").setAttribute("hidden", "true");\r\n    animateGraph(ecie.visited, ecie.path);\r\n  }\r\n}\r\n\r\n// visualize BFS function\r\nfunction visualizeBfs(ROWS, COLUMNS, startNode, endNode, blockedNodes) {\r\n  // making graph\r\n  let graph = makeGraph(ROWS, COLUMNS);\r\n\r\n  // filtering graph\r\n  filterGraph(graph, blockedNodes);\r\n\r\n  // finding shortest path\r\n  let ecie = algorithms.bfs(graph, startNode, endNode);\r\n\r\n  console.log(ecie);\r\n\r\n  // if there\'s no shortest path\r\n  if (typeof ecie === "undefined") {\r\n    document.getElementById("no-path").removeAttribute("hidden");\r\n  }\r\n  // if everything went good\r\n  else {\r\n    document.getElementById("no-path").setAttribute("hidden", "true");\r\n    animateGraph(ecie.visited, ecie.path);\r\n  }\r\n}\r\n\r\n// dynamic pathfinding function\r\nfunction dynamicAnimate(ROWS, COLUMNS, startNode, endNode, blockedNodes) {\r\n  // determine algorithm\r\n  let choosedAlgorithm = document.getElementById("choose-algorithm").value;\r\n\r\n  // making graph\r\n  let graph = makeGraph(ROWS, COLUMNS);\r\n\r\n  // filtering graph\r\n  filterGraph(graph, blockedNodes);\r\n\r\n  if (choosedAlgorithm == "bfs") {\r\n    // finding shortest path\r\n    let visitedAndPath = algorithms.bfs(graph, startNode, endNode);\r\n    instantAnimate(visitedAndPath.visited, visitedAndPath.path);\r\n  } else if (choosedAlgorithm == "astar") {\r\n    let visitedAndPath = algorithms.aStar(graph, startNode, endNode);\r\n    instantAnimate(visitedAndPath.visited, visitedAndPath.path);\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  filterGraph,\r\n  animateGraph,\r\n  makeGrid,\r\n  setInitialValues,\r\n  makeGraph,\r\n  makeWeightedGraph,\r\n  filterWeightedGraph,\r\n  visualizeAstar,\r\n  visualizeBfs,\r\n  dynamicAnimate,\r\n};\r\n\n\n//# sourceURL=webpack://tryingwebpack/./src/scripts/control.js?')},"./src/scripts/lightRecursiveDivision.js":module=>{eval('function lightRecursiveDivision(width, height) {\r\n  let blockedNodes = new Set();\r\n  let passages = new Set();\r\n\r\n  for (let i = 0; i < width; i++) {\r\n    blockedNodes.add(`c${i}r0`);\r\n    blockedNodes.add(`c${i}r${height - 1}`);\r\n  }\r\n\r\n  for (let i = 0; i < height; i++) {\r\n    blockedNodes.add(`c0r${i}`);\r\n    blockedNodes.add(`c${width - 1}r${i}`);\r\n  }\r\n\r\n  function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n\r\n  function chooseDirection(width, height) {\r\n    if (width > height) {\r\n      return "vertical";\r\n    } else if (height > width) {\r\n      return "horizontal";\r\n    } else {\r\n      let random = getRandomInt(1, 3);\r\n      if (random == 1) {\r\n        return "vertical";\r\n      } else {\r\n        return "horizontal";\r\n      }\r\n    }\r\n  }\r\n\r\n  function divideGraph(colStart, colEnd, rowStart, rowEnd, direction) {\r\n    if (colEnd - colStart < 1 || rowEnd - rowStart < 1) {\r\n      return;\r\n    }\r\n\r\n    if (direction == "horizontal") {\r\n      // possible rows\r\n      let possibleRows = [];\r\n      for (let i = rowStart + 1; i < rowEnd; i += 1) {\r\n        possibleRows.push(i);\r\n      }\r\n\r\n      // filter possible rows\r\n      possibleRows = possibleRows.filter(\r\n        (x) =>\r\n          !passages.has(`c${colStart - 1}r${x}`) &&\r\n          !passages.has(`c${colEnd + 1}r${x}`)\r\n      );\r\n\r\n      // possible columns\r\n      let possibleColumns = [];\r\n      for (let i = colStart; i <= colEnd + 1; i += 2) {\r\n        possibleColumns.push(i);\r\n      }\r\n\r\n      let randomRowStart = possibleRows[getRandomInt(0, possibleRows.length)];\r\n      let randomColumnToSkip =\r\n        possibleColumns[getRandomInt(0, possibleColumns.length)];\r\n\r\n      console.log(randomColumnToSkip);\r\n\r\n      for (let i = colStart; i <= colEnd; i++) {\r\n        if (i != randomColumnToSkip) {\r\n          blockedNodes.add(`c${i}r${randomRowStart}`);\r\n        } else {\r\n          passages.add(`c${i}r${randomRowStart}`);\r\n        }\r\n      }\r\n\r\n      // direction of the next walls\r\n      let newDirectionOfUpper =\r\n        randomRowStart - rowStart - 1 > colEnd - colStart\r\n          ? "horizontal"\r\n          : "vertical";\r\n      let newDirectionOfLower =\r\n        rowEnd - randomRowStart > colEnd - colStart ? "horizontal" : "vertical";\r\n\r\n      // recursive call\r\n      divideGraph(\r\n        colStart,\r\n        colEnd,\r\n        rowStart,\r\n        randomRowStart - 1,\r\n        newDirectionOfUpper\r\n      );\r\n      divideGraph(\r\n        colStart,\r\n        colEnd,\r\n        randomRowStart + 1,\r\n        rowEnd,\r\n        newDirectionOfLower\r\n      );\r\n    } else {\r\n      // possible columns\r\n      let possibleColumns = [];\r\n      for (let i = colStart + 1; i <= colEnd; i += 2) {\r\n        possibleColumns.push(i);\r\n      }\r\n      // possible roows\r\n      let possibleRows = [];\r\n      for (let i = rowStart; i <= rowEnd; i++) {\r\n        possibleRows.push(i);\r\n      }\r\n\r\n      // filter possible columns\r\n      possibleColumns = possibleColumns.filter(\r\n        (x) => !passages.has(`c${x}r${rowStart - 1}`)\r\n      );\r\n\r\n      let randomColStart =\r\n        possibleColumns[getRandomInt(0, possibleColumns.length)];\r\n      let randomRowToSkip = possibleRows[getRandomInt(0, possibleRows.length)];\r\n\r\n      for (let i = rowStart; i <= rowEnd; i++) {\r\n        if (i != randomRowToSkip) {\r\n          blockedNodes.add(`c${randomColStart}r${i}`);\r\n        } else {\r\n          passages.add(`c${randomColStart}r${i}`);\r\n        }\r\n      }\r\n\r\n      // direction of the next walls\r\n      let newDirectionOfLeft =\r\n        randomColStart - colStart - 1 < rowEnd - rowStart\r\n          ? "horizontal"\r\n          : "vertical";\r\n      let newDirectionOfRight =\r\n        colEnd - randomColStart < rowEnd - rowStart ? "horizontal" : "vertical";\r\n\r\n      // recursive call\r\n      divideGraph(\r\n        colStart,\r\n        randomColStart - 1,\r\n        rowStart,\r\n        rowEnd,\r\n        newDirectionOfLeft\r\n      );\r\n      divideGraph(\r\n        randomColStart + 1,\r\n        colEnd,\r\n        rowStart,\r\n        rowEnd,\r\n        newDirectionOfRight\r\n      );\r\n    }\r\n  }\r\n\r\n  divideGraph(1, width - 2, 1, height - 2, "vertical");\r\n  console.log(passages);\r\n  return blockedNodes;\r\n}\r\n\r\nmodule.exports = { lightRecursiveDivision };\r\n\n\n//# sourceURL=webpack://tryingwebpack/./src/scripts/lightRecursiveDivision.js?')}},__webpack_module_cache__={};function __webpack_require__(r){var n=__webpack_module_cache__[r];if(void 0!==n)return n.exports;var e=__webpack_module_cache__[r]={exports:{}};return __webpack_modules__[r].call(e.exports,e,e.exports,__webpack_require__),e.exports}var __webpack_exports__=__webpack_require__("./src/index.js")})();